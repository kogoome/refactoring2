06 CHAPTER 기본적인 리팩터링

카탈로그의 첫머리는 가장 기본적이고 많이 사용해서 제일 먼저 배워야 하는 리팩터링들로 시작한다.

내가 가장 많이 사용하는 리팩터링은 함수 추출하기 1절와 변수 추출하기' 다. 리팩터링은 본래 코드를 변경하는 작업인 만큼, 이 두 리팩터링을 반대로 진행하는 함수 인라인하기 - 와 변수 인라인하기 -4도 자주 사용한다.

출은 결국 이름 짓기이며, 코드 이해도가 높아지다 보면 이름을 바꿔야 할 때가 많다. 함수 선언 바꾸기 5점는 함수의 이름을 변경할 때 많이 쓰인다. 함수의 인수를 추가하거나 제거할 때도 이 리팩터링을 적용한다. 바꿀 대상이 변수라면 변수 이름 바꾸기' 7철를 사용하는데, 이는 변수 캡슐화하기 10절와 관련이 깊다. 자주 함께 뭉쳐 다니는 인수들은 매개변수 객체 만들기 A를 적용해 객체 하나로 묶으면 편리할 때가 많다.

함수 구성과 이름 짓기는 가장 기본적인 저수준 리팩터링이다. 그런데 일단 함수를 만들고 나면 다시 고수준 모듈로 묶어야 한다. 이렇게 함수를 그룹으로 묶을 때는 여러 함수를 클래스로 묶기 9를 이용한다. 이때 이 함수들이 사용하는 데이터도 클래스로 함께 묶는다. 또 다른 방법으로 여러 함수를 변환 함수로 묶기 10점도 있는데, 읽기전용 데이터를 다룰 때 특히 좋다. 나는 한 걸음 더 나아가, 한데 묶은 모듈들의 작업 처리 과정을 명확한 단계로 구분 짓는 단계 쪼개기 10.11전를 적용할 때도 많다.

page(157)

6.1 함수 추출하기 Extract Function

- 반대 리팩터링 : 함수 인라인하기 6.2절
- 1판에서의 이름 : 메서드 추출

function printOwing(invoice) {
  printBanner();
  let outstanding = calculateOutstanding();

  // 세부 사항 출력
  console.log(`고객명: ${invoice.customer}`);
  console.log(`채무액: ${outstanding}`);

function printOwing(invoice) {
  printBanner();
  let outstanding = calculateOutstanding();
  printDetails(outstanding);

  function printDetails(outstanding) {
    console.log(`고객명: ${invoice.customer}`);
    console.log(`채무액: ${outstanding}`);
  }
}

page(158)

배경

함수 추출하기는 내가 가장 많이 사용하는 리팩터링 중 하나다 (여기서 '함수'라고 표현했는데 객체 지향 언어의 메서드inelhers'나 절차형 언어의 프로시저 pricelure / 서브루틴ubline에도 똑같이 적용된다). 코드 조각을 찾아 무슨 일을 하는지 파악한 다음, 독립된 함수로 추출하고 목적에 맞는 이름을 붙인다.

코드를 언제 독립된 함수로 묶어야 할지에 관한 의견은 수없이 많다. 먼저, 길이를 기준으로 삼을 수 있다. 가령 함수 하나가 한 화면을 넘어가면 안 된다는 규칙을 떠올릴 수 있다. 재사용성을 기준으로 할 수도 있다. 두 번 이상 사용될 코드는 함수로 만들고, 한 번만 쓰이는 코드는 인라인 상태로 놔두는 것이다. 하지만 내 눈에는 목적과 구현을 분리하는 방식이 가장 합리적인 기준으로 보인다. 코드를 보고 무슨 일을 하는지 파악하는 데 한참이 걸린다면 그 부분을 함수로 추출한 뒤 ‘무슨 일에 걸맞는 이름을 짓는다. 이렇게 해두면 나중에 코드를 다시 읽을 때 함수의 목적이 눈에 확 들어오고, 본문 코드(그 함수가 목적을 이루기 위해 구체적으로 수행하는 일)에 대해서는 더 이상 신경 쓸 일이 거의 없다.

이 원칙을 적용한 뒤로는 함수를 아주 짧게, 대체로 단 몇 줄만 담도록 작성하는 습관이 생겼다. 내 경험상 함수 안에 들어갈 코드가 대여섯 줄을 넘어갈 때부터 슬슬 냄새를 풍기기 시작했고, 단 한 줄짜리 함수를 만드는 일도 적지 않았다. 길이가 그리 중요하지 않다는 사실을 깨닫게 된 계기는 켄트 벡이 보여준 오리지널 스몰토크 시스템이었다. 당시 스몰토크는 흑백 시스템에서 실행됐다. 그래서 화면에서 텍스트나 그래픽을 강조하려면 해당 부분의 색상을 반전시켜야 했다. 스몰토크의 그래픽스 클래스에는 이 목적으로 쓰이는 highlight() 메서드가 있었는데, 구현 코드를 보니 단순히 reverse()라는 메서드만 호출하고 있었다. 메서드 이름이 구현 코드보다 길었지만, 그건 문제가 되지 않았다. 코드의 목적(강조)과 구현 (반전) 사이의 차이가 그만큼 컸기 때문이다.

함수를 짧게 만들면 함수 호출이 많아져서 성능이 느려질까 걱정하는 사람도 있다. 내가 젊던 시절에는 간혹 문제가 되긴 했지만 요즘은 그럴 일이 거의 없다. 함수가 짧으면 캐싱하기가 더 쉽기 때문에 컴파일러가 최적화하는 데 유리할 때가 많다. 성능 최적화에 대해서는 항상 일반 지침을 따르도록 하자.*

옮긴이 최적회를 할 때는 다음 두 규칙을 따르기 바란다. 첫 번째, 하지 마라. 두 번째(전문가 한정), 아직 하지 마라." - M. A. 잭슨

page(159)

이러한 짧은 함수의 이점은 이름을 잘 지어야만 발휘되므로 이름 짓기에 특별히 신경 써야 한다. 이름을 잘 짓기까지는 어느 정도 훈련이 필요하다. 하지만 일단 요령을 터득한 후에는 별도문서 없이 코드 자체만으로 내용을 충분히 설명되게 만들 수 있다.

긴 함수에는 각각의 코드 덩어리 첫머리에 그 목적을 설명하는 주석이 달려 있을 때가 많다. 해당 코드 덩어리를 추출한 함수의 이름을 지을 때 이 주석을 참고하면 도움이 될 것이다.

절차

1. 함수를 새로 만들고 목적을 잘 드러내는 이름을 붙인다('어떻게'가 아닌 '무엇을 하는지가 드러나야한다).

→ 대상 코드가 함수 호출문 하나처럼 매우 간단하더라도 함수로 뽑아서 목적이 더 잘 드러나는 이름을 붙일 수 있다면 추출한다. 이런 이름이 떠오르지 않는다면 함수로 추출하면 안 된다는 신호다. 하지만 추출하는 과정에서 좋은 이름이 떠오를 수도 있으니 처음부터 최선의 이름부터 짓고 시작할 필요는 없다. 일단 함수로 추출해서 사용해보고 효과가 크지 않으면 다시 원래 상태로 인라인해도 된다. 그 과정에서 조금이리도 깨달은 게 있다면 시간 낭비는 아니다. 중첩 함수를 지원하는 언어를 사용한다면 추출한 함수를 원래 함수 안에 중첩시킨다. 그러면 다음 단계에서 수행할, 유효범위를 벗어난 변수를 처리하는 작업을 줄일 수 있다. 원래 함수의 바깥으로 꺼내야 할 때가 오면 언제든 함수 옮기기를 적용하면 된다.

2. 추출할 코드를 원본 함수에서 복사하여 새 함수에 붙여넣는다.

3. 추출한 코드 중 원본 함수의 지역 변수를 참조하거나 추출한 함수의 유효범위를 벗어나는 변수는 없는지 검사한다. 있다면 매개변수로 전달한다.

→ 원본 함수의 중첩 함수로 추출할 때는 이런 문제가 생기지 않는다.

→ 일반적으로 함수에는 지역 변수와 매개변수가 있기 마련이다. 가장 일반적인 처리 방법은 이런 변수 모두를 인수로 전달하는 것이다. 사용은 하지만 값이 바뀌지 않는 변수는 대체로 이렇게 쉽게 처리할 수 있다.

→ 추출한 코드에서만 사용하는 변수가 추출한 함수 밖에 선언되어 있다면 추출한 함수 안에서 선언하도록 수정한다.

→ 추출한 코드 안에서 값이 바뀌는 변수 중에서 값으로 전달되는 것들은 주의해서 처리한다. 이런 변수가 하나뿐이라면 추출한 코드를 질의 함수로 취급해서 그 결과(반환 값)를 해당 변수에 대입한다.

→ 때로는 추출한 코드에서 값을 수정하는 지역 변수가 너무 많을 수 있다. 이럴 때는 함수 추출을 멈주고, 변수 쪼개기' 나 임시 변수를 질의 함수로 바꾸기' 와 같은 다른 리팩터링을 적용해서 변수를 사용하는 코드를 단순하게 바꿔본다. 그런 다음 함수 추출을 다시 시도한다.

4. 변수를 다 처리했다면 컴파일한다.

→ 컴파일되는 언어로 개발 중이라면 변수를 모두 처리하고 나서 한번 컴파일해보자, 제대로 처리하지 못한 변수를 찾는 데 도움될 때가 많다.

page(160)

원본 함수에서 추출한 코드 부분을 새로 만든 함수를 호출하는 문장으로 바꾼다(즉, 추출한 함수로 일을 위임한다).

5. 테스트한다.

6. 다른 코드에 방금 추출한 것과 똑같거나 비슷한 코드가 없는지 살핀다. 있다면 방금 추출한 새 함수를 호출하도록 바꿀지 검토한다(인라인 코드를 함수 호출로 바꾸기.5절).→ 중복 혹은 비슷한 코드를 찾아주는 리팩터링 도구도 있다. 이런 도구가 없다면 검색 기능을 이용하여 다른 곳에 중복된 코드가 없는지 확인해보는 것이 좋다.

예시: 유효범위를 벗어나는 변수가 없을 때

아주 간단한 코드에서는 함수 추출하기가 굉장히 쉽다.

const printOwing = invoice => {
  let outstanding = 0

  console.log('*******************')
  console.log('***** 고객채무 *****')
  console.log('*******************')

  // 미해결 채무(outstanding)를 계산한다.
  for (const o of invoice.orders) {
    outstanding += o.amount
  }

  // 마감일 (dueDate)을 기록한다.
  const today = new Date()
  invoice.dueDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 30)

  // 세부 사항을 출력한다.
  console.log(`고객명: ${invoice.customer}`)
  console.log(`채무액: ${outstanding}`)
  console.log(`마감일: ${invoice.dueDate?.toLocaleString()}`)
}

printOwing({
  customer: '재남',
  orders: [
    { name: '사채', amount: 100 },
    { name: '대출', amount: 1000 },
  ],
})

여기서 Clock.today는 내가 Clock Wrapper* 라고 부르는 것으로, 시스템 시계를 감싸는 객체다. 나는 Date.now()처럼 시스템 시간을 알려주는 함수는 직접 호출하지 않는다. 직접 호출

page(161)

하면 테스트할 때마다 결과가 달라져서 오류 상황을 재현하기가 어렵기 때문이다.

배너hanner'를 출력하는 코드는 다음과 같이 간단히 추출할 수 있다. 그냥 해당 코드를 잘라내서새 함수에 붙이고, 원래 자리에 새 함수 호출문을 넣으면 된다.

—— function printowing(invoice) {

let outstanding = 0;

printBanner();

- 배너 출력 로직을 함수로 추출

|| 미해결 채무(outstanding)를 계산한다.for (const o of invoice.orders) {

outstanding += 0.amount; }

// 마감일 (dueDate)을 기록한다. const today = Clock.today; invoice.dueDate = new Date(today.getFullYear(), today.getMonth(),

today.getDate() + 30);

// 세부 사항을 출력한다.console. Log( 고객명 : {invoice.customer} );console. log( 채무액 : ${outstanding} );

console. log( 마감일: ${invoice.dueDate .toLocalelatestring()}); }

function printBanner() {

console. Log("***年************");console. Log("本本本* 고객 채무 ****");

console.log(" }

*************");

마찬가지로 세부 사항을 출력하는 코드도 간단히 추출할 수 있다.

- function printowing(invoice) {

let outstanding = 0;

printBanner();

|| 미해결 채무(outstanding)를 계산한다.

162 리팩터링(2판)


for (const o of invoice.orders) { outstanding += 0.amount; }

|| 마감일 (dueDate)을 기록한다. const today = Clock.today; invoice.dueDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 30);

printDetails();- 세부 사항 출력 로직을 함수로 추출

function printDetails() { console. Log( 고객명 : ${invoice.customer}'); console.log(`채무액: ${outstanding}');

console.log(0212: ${invoice.dueDate.toLocaleDateString()}'); }

여기까지만 보면 함수 추출 리팩터링이 너무 간단하다고 여길 수 있다. 하지만 더 까다로울 때가 많다. 여기서 printDetails()가 printowing()에 중첩되도록 정의했다. 이렇게 하면 추출한 함수에서 printowing()에 정의된 모든 변수에 접근할 수 있다. 하지만 중첩 함수를 지원하지 않는 언어에서는 불가능한 방법이다. 그럴 때는 함수를 최상위 수준으로 추출하는 문제로 볼 수 있다. 따라서 원본 함수에서만 접근할 수 있는 변수들에 특별히 신경 써야 한다. 원본 함수의 인수나 그 함수 안에서 정의된 임시 변수가 여기 해당한다.

예시: 지역 변수를 사용할 때

지역 변수와 관련하여 가장 간단한 경우는 변수를 사용하지만 다른 값을 다시 대입하지는 않을 때다. 이 경우에는 지역 변수들을 그냥 매개변수로 넘기면 된다. 다음 코드를 보자.

function printOwing(invoice) { let outstanding = 0; printBanner(); || 미해결 채무(outstanding)를 계산한다. for (const o of invoice.orders) { outstanding += 0.amount; 3


// 마감일(dueDate)을 기록한다.
const today = Clock.today; invoice.dueDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 30);

// 세부 사항을 출력한다.
console.log( 2740: ${invoice.customer}'); console.log(`채무액 : ${outstanding}'); console.log(0212: ${invoice.dueDate.toLocaleDateString()}'); }

세부 사항을 출력하는 코드를 다음과 같이 지역 변수 두 개를 매개변수로 받는 함수로 추출한다.

- function printowing(invoice) {

let outstanding = 0;

printBanner();

// 미해결 채무(outstanding)를 계산한다. for (const o of invoice.orders) {

outstanding += 0.amount; }

// 마감일(dueDate)을 기록한다. const today = Clock.today; invoice.dueDate = new Date(today.getFullYear(), today.getMonth(),

today.getDate() + 30);

printDetails(invoice, outstanding);

앞의 예와 달리 지역 변수를 매개변수로 전달

function printDetails(invoice, outstanding) { console. Log(고객명 : ${invoice.customer}'); console. Log( 채무액: ${outstanding}); console.log(마감일: ${invoice.dueDate.toLocaleDateString()}'); }

}

지역 변수가 (배열, 레코드, 객체와 같은) 데이터 구조라면 똑같이 매개변수로 넘긴 후 필드값을 수정할 수 있다. 가령 마감일을 설정하는 코드는 다음과 같이 추출한다.

164 리팩터링(2판)


- function printowing(invoice) {

let outstanding = 0;

printBanner();

// 미해결 채무(outstanding)를 계산한다.for (const o of invoice.orders) {

outstanding += 0.amount; }

recordDueDate(invoice); - 마감일 설정 로직을 함수로 추출 printDetails(invoice, outstanding); }

function recordDueDate(invoice) { const today = Clock.today; invoice.dueDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 30); }

예시: 지역 변수의 값을 변경할 때

지역 변수에 값을 대입하게 되면 문제가 복잡해진다. 지금은 임시 변수만을 취급하겠다. 만약매개변수에 값을 대입하는 코드를 발견하면 곧바로 그 변수를 쪼개서 1절 임시 변수를 새로 하나 만들어 그 변수에 대입하게 한다.

대입 대상이 되는 임시 변수는 크게 두 가지로 나눌 수 있다. 먼저 간단한 경우는 변수가 추출된 코드 안에서만 사용될 때다. 즉, 이 변수는 추출된 코드 안에서만 존재한다. 만약 변수가 초기화되는 지점과 실제로 사용되는 지점이 떨어져 있다면 문장 슬라이드하기 를 활용하여 변수 조작을 모두 한곳에 치리하도록 모아두면 편하다.

이보다 특이한 경우는 변수가 추출한 함수 밖에서 사용될 때다. 이럴 때는 변수에 대입된 새 값을 반환해야 한다. 앞에서 본 코드를 다시 살펴보자.

function printOwing(invoice) {

let outstanding = 0;

Chapter 06 - 기본적인 리팩터링

printBanner();

Extract Function6.1 함수 추출하기

165


// 미해결 채무(outstanding)를 계산한다. for (const o of invoice.orders) { outstanding += 0.amount; } recordDueDate(invoice);

printDetails(invoice, outstanding);

앞 예시에서 수행한 리팩터링들은 모두 간단해서 단번에 처리했지만, 이번에는 단계를 나눠서 진행해보자.

먼저 선언문을 변수가 사용되는 코드 근처로 슬라이드한다.

- function printowing(invoice) { printBanner(); || 미해결 채무(outstanding)를 계산한다. let outstanding = 0; - 맨 위에 있던 선언문을 이 위치로 이동 for (const o of invoice.orders) { outstanding += 0.amount; } recordDueDate(invoice); printDetails(invoice, outstanding); }

② 그런 다음 추출할 부분을 새로운 함수로 복사한다.

- function printowing(invoice) { printBanner(); // 미해결 채무(outstanding)를 계산한다. let outstanding = 0; for (const o of invoice.orders) { outstanding += 0.amount; }

recordDueDate(invoice); printDetails(invoice, outstanding);

166 리팩터링(2판)

}


}

function calculateOutstanding(invoice) { let outstanding = 0; - 추출할 코드 복사 for (const o of invoice.orders) { outstanding += 0.amount; } return outstanding; - 수정된 값 반환 }

3 outstanding의 선언문을 추출할 코드 앞으로 옮겼기 때문에 매개변수로 전달하지 않아도된다. 추출한 코드에서 값이 변경된 변수는 outstanding뿐이다. 따라서 이 값을 반환한다.

④ 내 자바스크립트 환경은 컴파일해도 아무런 값을 출력하지 않는다(사실 편집기의 구문 분석 기능보다 못하다). 따라서 이 단계에서는 더 이상 할 일이 없다. ⑤ 다음으로 넘어가서 추출한 코드의 원래 자리를 새로 뽑아낸 함수를 호출하는 문장으로 교체한다. 추출한 함수에서 새값을 반환하니, 이 값을 원래 변수에 저장한다.

function printOwing(invoice) { printBanner(); let outstanding = calculateOutstanding(invoice recordDueDate(invoice); printDetails(invoice, outstanding); function calculateOutstanding(invoice) { let outstanding = 0; for (const o of invoice.orders) { outstanding += 0.amount; } return outstanding; }

);- 함수 추출 완료, 추출한 함수가 반환한 값을원래 변수에 저장한다.

마지막으로 반환 값의 이름을 내 코딩 스타일에 맞게 바꾼다.

function printOwing(invoice) { printBanner(); const outstanding = calculateoutstanding(invoice); recordDueDate(invoice);

Chapter 06 - 기본적인 리팩터링

ExtractFunction61 함수 추출하기

167


printDetails(invoice, outstanding); }

function calculateOutstanding(invoice) { let result = 0; - 변수 이름 변경 for (const o of invoice.orders) { result += 0.amount; } return result; }

이때 원본 변수인 outstanding에 const를 붙여 불변으로 만들었다.

값을 반환할 변수가 여러 개라면?

방법이 몇 가지 있다. 나는 주로 추출할 코드를 다르게 재구성하는 방향으로 처리한다. 개인적으로 함수가 값 하나만 반환하는 방식을 선호하기 때문에 각각을 반환하는 함수 여러 개로 만든다. 굳이 한 함수에서 여러 값을 반환해야 한다면 값들을 레코드로 묶어서 반환해도 되지만, 임시 변수 추출 작업을 다른 방식으로 처리하는 것이 나을 때가 많다. 여기서는 임시 변수를 질의 함수로 바꾸거나 4 변수를 쪼개는 식으로 처리하면 좋다. 그렇다면 이렇게 추출한 함수를 최상위 수준 같은 다른 문맥 contest 으로 이동하려면 어떻게 해야 할까? 나는 단계를 작게 쪼개는 걸 좋아하기 때문에 내 본능은 먼저 중첩 함수로 추출하고 나서 새로운 문맥으로 옮기라고 말한다. 하지만 이렇게 하면 변수를 처리하기가 까다로울 수 있는데, 실제로 문맥을 옮겨보기 전에는 알지 못한다. 따라서 중첩 함수로 추출할 수 있더라도 최소한 원본 함수와 같은 수준의 문맥으로 먼저 추출해보자. 그러면 코드를 제대로 추출했는지 즉각 판별할 수 있다.

168 리팩터링(2판)


6.2 함수 인라인하기Inline Function

• 반대 리팩터링: 함수 추출하기 6.11판에서의 이름: 메서드 내용 직접 삽입

function getRating(driver) {

return moreThanFiveLateDeliveries(driver) ? 2 : 1; }

function moreThanFiveLateDeliveries (driver) {

return driver.numberOfLateDeliveries > 5; }

function getRating(driver) {

return (driver.numberOfLateDeliveries > 5) ? 2 : 1; }

배경

이 책은 목적이 분명히 드러나는 이름의 짤막한 함수를 이용하기를 권한다. 그래야 코드가 명료해지고 이해하기 쉬워지기 때문이다. 하지만 때로는 함수 본문이 이름만큼 명확한 경우도 있다. 또는 함수 본문 코드를 이름만큼 깔끔하게 리팩터링할 때도 있다. 이럴 때는 그 함수를 제거한다. 간접 호출은 유용할 수도 있지만 쓸데없는 간접 호출은 거슬릴 뿐이다.

리팩터링 과정에서 잘못 추출된 함수들도 다시 인라인한다. 잘못 추출된 함수들을 원래 함수로합친 다음, 필요하면 원하는 형태로 다시 추출하는 것이다.

간접 호출을 너무 과하게 쓰는 코드도 흔한 인라인 대상이다. 가령 다른 함수로 단순히 위임하기만 하는 함수들이 너무 많아서 위임 관계가 복잡하게 얽혀 있으면 인라인해버린다. 그중 간

Chapter 06 - 기본적인 리팩터링

InlineFunction6.2 함수인라인하기

169


접 호출을 유지하는 편이 나은 경우도 있겠지만, 모두 그렇지는 않을 것이다. 함수 인라인하기를 활용하면 유용한 것만 남기고 나머지는 제기할 수 있다.

절차

0 다형 메서드 moreane mentin 인지 확인한다.

서브클래스에서 오버라이드하는 메서드는 인라인하면 안 된다.

② 인라인할 함수를 호출하는 곳을 모두 찾는다.

③ 각 호출문을 함수 본문으로 교체한다.

④ 하나씩 교체할 때마다 테스트한다. → 인라인 작업을 한 번에 처리할 필요는 없다. 인라인하기가 까다로운 부분이 있다면 일단 남겨두고

여유가 생길 때마다 틈틈이 처리한다.

⑤ 함수 정의 (원래 함수)를 삭제한다.

말로는 아주 간단해 보이지만 실제로는 그렇지 않을 때가 많다. 재귀 호출, 반환문이 여러 개인함수, 접근자가 없는 다른 객체에 메서드를 인라인하는 방법 등을 일일이 설명하자면 몇 쪽은 필요할 것이다. 각각의 경우를 다 설명하지 않는 이유는, 상황이 그 정도로 복잡하다면 함수 인라인하기를 적용하면 안 되기 때문이다.

예시

가장 간단한 경우를 살펴보자, 너무 간단해서 따로 설명할 필요가 없을 정도다.

- function rating(apriver) { return moreThanFiveLateDeliveries (aDriver) ? 2 : 1; } function more Than FiveLateDeliveries (aDriver) { return aDriver.numberOfLateDeliveries > 5; }

호출되는 함수의 반환문을 그대로 복사해서 호출하는 함수의 호출문을 덮어쓰면 끝이다.

-function rating(aDriver) { return aDriver.numberOfLateDeliveries > 5 ? 2 : 1; }

170 리팩터링(2판)


그런데 복사한 코드가 새로운 위치에 잘 들어맞도록 손봐줘야 하는 경우도 있다. 예컨대 앞의 코드가 다음과 같이 약간 다르게 작성되어 있다고 해보자.

- function rating(aDriver) { return more ThanFiveLateDeliveries (aDriver) ? 2 : } function more ThanFiveLateDeliveries(dvr) { return dvr.numberOfLateDeliveries > 5; }

1;

거의 비슷하지만 moreThanFiveLateDeliveries()를 호출할 때 전달하는 인수 이름이 함수 정의에 쓰인 이름과 다르다. 따라서 인라인 후 코드를 살짝 만져줘야 한다.

function rating(aDriver) { return aDriver.numberOfLateDeliveries > 5 ? 2 : 1; }

이보다 일이 더 많은 경우도 있다. 다음 코드를 보자.

function reportLines (aCustomer) { const lines = []; gatherCustomerData(lines, acustomer); return lines; } function gatherCustomerData(out, ačustomer) { out.push(["name", acustomer.name]); out.push(["location", acustomer. location]); }

단순히 잘라 붙이는 식으로는 gatherCustomerData()를 reportlines()로 인라인할 수 없다. 아주 복잡하지는 않고 여전히 단번에 옮기고 약간 수정해주면 될 때도 많지만, 실수하지 않으려면 한 번에 한 문장씩 옮기는 것이 좋다. 그러니 먼저 여러 문장을 호출한 곳으로 옮기기 전를 적용해서 첫 문장부터 시작해보자 (잘라내서, 붙이고, 다듬는 방식으로 간단히 처리한다).

-function reportLines (aCustomer) {

const lines = [];

Chapter 06 - 기본적인 리팩터링

Inline Function 6.2 함수 인라인하기

171


lines.push(["name", aCustomer.name]); gatherCustomerData(lines, aCustomer); return lines; }

function gather CustomerData(out, aCustomer) { out.push(["name", aCustomer.name]); out.push(["location", aCustomer. Location]); }

나머지 문장도 같은 식으로 처리한다.

-function reportLines (aCustomer) { const lines = []; lines.push(["name", aCustomer.name]); lines.push(["location", aCustomer. location]); return lines; }

핵심은 항상 단계를 잘게 나눠서 처리하는 데 있다. 평소 내 스타일대로 함수를 작게 만들어뒀다면 인라인을 단번에 처리할 수 있을 때가 많다(물론 약간 다듬어야 할 수 있다). 그러다 상황이 복잡해지면 다시 한 번에 한 문장씩 처리한다. 한 문장을 처리하는 데도 얼마든지 복잡해질 수 있다. 이럴 때는 더 정교한 리팩터링인 문장을 호출한 곳으로 옮기기 절로 작업을더 잘게 나눈다. 어느 정도 자신감이 붙으면 다시 작업을 크게 묶어서 처리한다. 그러다 테스트가 실패하면 가장 최근의 정상 코드로 돌아온 다음, 아쉬운 마음을 달래며 단계를 잘게 나눠서다시 리팩터링한다.

리팩터링(2판)

172


6.3 변수 추출하기Extract Variable

도• 반대 리팩터링: 변수 인라인하기 5.1판에서의 이름: 직관적 임시변수 사용

return order.quantity * order.itemPrice - Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 + Math.min(order.quantity * order.itemPrice * 0.1, 100); const basePrice = order.quantity * order. itemPrice; const quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice *. 0.05; const shipping = Math.min(basePrice + 0.1, 100); return basePrice - quantityDiscount + shipping;

배경

표현식이 너무 복잡해서 이해하기 어려울 때가 있다. 이럴 때 지역 변수를 활용하면 표현식을쪼개 관리하기 더 쉽게 만들 수 있다. 그러면 복잡한 로직을 구성하는 단계마다 이름을 붙일 수있어서 코드의 목적을 훨씬 명확하게 드러낼 수 있다.

이 과정에서 추가한 변수는 디버깅에도 도움된다. 디버거에 중단점reakpoin을 지정하거나 상태를 출력하는 문장을 추가할 수 있기 때문이다.

변수 추출을 고려한다고 함은 표현식에 이름을 붙이고 싶다는 뜻이다. 이름을 붙이기로 했다면그 이름이 들어갈 문맥도 살펴야 한다. 현재 함수 안에서만 의미가 있다면 변수로 추출하는 것이 좋다. 그러나 함수를 벗어난 넓은 문맥에서까지 의미가 된다면 그 넓은 범위에서 통용되는이름을 생각해야 한다. 다시 말해 변수가 아닌 (주로) 함수로 추출해야 한다. 이름이 통용되는문맥을 넓히면 다른 코드에서 사용할 수 있기 때문에 같은 표현식을 중복해서 작성하지 않아도된다. 그래서 중복이 적으면서 의도가 잘 드러나는 코드를 작성할 수 있다.

Chapter 06 - 기본적인 리팩터링

Extract Vanable6.3 변수 추출하기

173


이름이 통용되는 문맥을 넓힐 때 생기는 단점은 할 일이 늘어난다는 것이다. 많이 늘어날 것 같다면 임시 변수를 질의 함수로 바꾸기를 적용할 수 있을 때까지 일단 놔둔다. 간단히 처리할 수 있다면 즉시 넓혀서 다른 코드에서도 사용할 수 있게 한다. 가령 클래스 안의 코드를 다룰 때는 함수 추출하기 1를 아주 쉽게 적용할 수 있다.

절차

추출하려는 표현식에 부작용은 없는지 확인한다.② 불변 변수를 하나 선언하고 이름을 붙일 표현식의 복제본을 대입한다.③ 원본 표현식을 새로 만든 변수로 교체한다.④ 테스트한다.

⑤ 표현식을 여러 곳에서 사용한다면 각각을 새로 만든 변수로 교체한다. 하나 교체할 때마다 테스트한다.

예시간단한 계산식에서 시작해보자.

function price(order.. { // 가격(price). = 기본 가격 - 수량 할인 + 배송비 return order. quantity * order.itemPrice - Math.max(0, order.quantity - 500) * order,itemPrice * 0.05 + Math.min(order . quantity * order.itemPrice * 0.1, 100); }

간단한 코드지만 더 쉽게 만들 수 있다. 먼저 기본 가격은 상품 가격 (itemPrice)에 수량(quantity)을 곱한 값임을 파악해내야 한다.

function price(order) { // 가격(price) - 기본 가격 - 수량 할인 + 배송비 return order.quantity * order.itemPrice - Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 + Math.min(order.quantity * order.itemPrice * 0.1, 100); }

② 이 로직을 이해했다면 기본 가격을 담을 변수를 만들고 적절한 이름을 지어준다.

174 리팩터링(2판)


- function price(order) { // 가격(price) = 기본 가격 - 수량 할인 + 배송비 const basePrice = order.quantity * order.itemPrice; return order.quantity * order.itemPrice - Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 + Math.min(order.quantity * order.itemPrice * 0.1, 100); }

물론 이렇게 변수 하나를 선언하고 초기화한다고 해서 달라지는 건 없다. 3 이 변수를 실제로사용해야 하므로 원래 표현식에서 새로 만든 변수에 해당하는 부분을 교체한다.

function price(order) { // 가격(price) = 기본 가격 - 수량 할인 + 배송비 const basePrice = order.quantity * order.itemPrice; return basePrice - Math.max(0, order, quantity - 500) * order.itemPrice * 0.05 + Math.min(order . quantity * order.itemPrice * 0.1, 100); }

방금 교체한 표현식이 쓰이는 부분이 더 있다면 마찬가지로 새 변수를 사용하도록 수정한다.

- function price(order) {

17 가격(price) = 기본 가격 - 수량 할인 + 배송비const basePrice = order.quantity * order.itemPrice;return basePrice -

Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 + Math.min(basePrice * 0.1, 100);

⑤ 그다음 줄은 수량 할인이다. 수량 할인도 다음과 같이 추출하고 교체한다.

}

function price(order) { || 가격(price) = 기본 가격 - 수량 할인 + 배송비 const basePrice = order.quantity * order.itemPrice; const quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05; return basePrice - quantityDiscount + Math.min(basePrice * 0.1, 100); }

25 마지막으로 배송비도 똑같이 처리한다. 다 수정했다면 주석은 지워도 된다. 주석에서

Chapter 06 - 기본적인 리팩터링

Extract Variable6.3 변수 추출하기

175


한 말이 코드에 그대로 드러나기 때문이다.

function price(order) { const basePrice = order.quantity * order. itemPrice; const quantityDiscount = Math.max(0, order.quantity - 500) * order. itemPrice * 0.5; const shipping = Math.min(basePrice * 0.1, 100); return basePrice - quantityDiscount + shipping; }

예시: 클래스 안에서 똑같은 코드를 클래스 문맥 안에서 처리하는 방법을 살펴보자.

- class Order { constructor(aRecord) { this._data = aRecord; } get quantity(){return this._data.guantity; } get itemPrice() {return this._data.itemPrice;} get price() { return this.quantity * this. itemPrice - Math.max(0, this.quantity - 500) * this.itemPrice * 0.05 + Math.min(this.quantity * this.itemPrice * 0.1, 100); } }

이번에도 추출하려는 이름은 같다. 하지만 그 이름이 가격을 계산하는 price() 메서드의 범위를 넘어, 주문을 표현하는 Order 클래스 전체에 적용된다. 이처럼 클래스 전체에 영향을 줄 때는 나는 변수가 아닌 메서드로 추출하는 편이다.

- class Order { constructor (aRecord) { this._data = aRecord; } get quantity() {return this._data.quantity
get itemPrice() {return this._data.itemPrice;}

get price() { return this.basePrice - this.quantityDiscount + this.shipping; } get basePrice {return this.quantity * this.itemPrice;} get quantityDiscount() {return Math.max(0, this.quantity - 500) * this.itemPrice * 0.05; } get shipping() {return Math.min(this.basePrice * 0.1, 100);} }

여기서 객체의 엄청난 장점을 볼 수 있다. 객체는 특정 로직과 데이터를 외부와 공유하려 할 때공유할 정보를 설명해주는 적당한 크기의 문맥이 되어준다. 이 예처럼 간단한 경우라면 효과가크지 않지만, 덩치가 큰 클래스에서 공통 동작을 별도 이름으로 뽑아내서 추상화해두면 그 객체를 다룰 때 쉽게 활용할 수 있어서 매우 유용하다.

Chapter 06 - 기본적인 리팩터링

Extract Variable53또하

177


6.4 변수 인라인하기 Inline Variable

· 반대 리팩터링: 변수 추출하기 6.3절• 1판에서의 이름: 임시변수 내용 직접 삽입

let basePrice = anOrder.basePrice; return (basePrice > 1000);

return anorder. basePrice > 1000;

배경

변수는 함수 안에서 표현식을 가리키는 이름으로 쓰이며, 대체로 긍정적인 효과를 준다. 하지만 그 이름이 원래 표현식과 다를 바 없을 때도 있다. 또 변수가 주변 코드를 리팩터링하는 데 방해가 되기도 한다. 이럴 때는 그 변수를 인라인하는 것이 좋다.

절차 0 대입문의 우변(표현식)에서 부작용이 생기지는 않는지 확인한다. ② 변수가 불변으로 선언되지 않았다면 불변으로 만든 후 테스트한다. - 이렇게 하면 변수에 값이 단 한 번만 대입되는지 확인할 수 있다.

③ 이 변수를 가장 처음 사용하는 코드를 찾아서 대입문 우변의 코드로 바꾼다.

Q 테스트한다.

⑤ 변수를 사용하는 부분을 모두 교체할 때까지 이 과정을 반복한다. 6 변수 선언문과 대입문을 지운다.

⑦ 테스트한다.

178 리팩터링(2판)


6.5 함수 선언 바꾸기 Change Function Declaration

f(x, y, z)

• 다른 이름: ► 함수 이름 바꾸기▶ 시그니처 바꾸기

f(x, y, z) { }

- 1판에서의 이름: ▶ 메서드명 변경·매개변수 추가▶ 매개변수 제거

function circun(radius) {...}

function circumference(radius) {...}

배경

함수는 프로그램을 작은 부분으로 나누는 주된 수단이다. 함수 선언은 각 부분이 서로 맞물리는 방식을 표현하며, 실질적으로 소프트웨어 시스템의 구성 요소를 조립하는 연결부 역할을 한다. 건축과 마친가지로 소프트웨어도 이러한 연결부에 상당히 의존한다. 연결부를 잘 정의하면 시스템에 새로운 부분을 추가하기가 쉬워지는 반면, 잘못 정의하면 지속적인 방해 요인으로 작용하여 소프트웨어 동작을 파악하기 어려워지고 요구사항이 바뀔 때 적절히 수정하기 어렵게 한다. 다행히 소프트웨어는 소프트하기 때문에 연결부를 수정할 수 있다. 단 주의해서 해야 한다.

이러한 연결부에서 가장 중요한 요소는 함수의 이름이다. 이름이 좋으면 함수의 구현 코드를 살펴볼 필요 없이 호출문만 보고도 무슨 일을 하는지 파악할 수 있다. 하지만 좋은 이름을 떠올리기란 쉽지 않다. 나도 적합한 이름을 단번에 지은 적이 거의 없다. 코드를 읽다가 의미가 와닿지 않는 이름을 발견해도 그대로 놔두고 싶은 유혹에 빠진다. 고작 이름일 뿐이지 않은가? 하지만 이는 '혼란'이라는 악마의 유혹이다. 프로그램의 영혼을 위해서라도 이러한 달콤한 속삭임에 절대 넘어가면 안 된다. 그래서 나는 이름이 잘못된 함수를 발견하면 더 나은 이름이 떠오르는 즉시 바꾸라는 명령으로 받아들인다. 그래야 나중에 그 코드를 다시 볼 때 무슨 일을 하는지 '또' 고민하지 않게 된다.

Chapter 06 - 기본적인 리팩터링

Change Function Declaration 6.5 함수 선언 바꾸기

179


좋은 이름을 떠올리는 데 효과적인 방법이 하나 있다. 바로 주석을 이용해 함수의 목적을 설명해보는 것이다. 그러다 보면 주석이 멋진 이름으로 바뀌어 되돌아올 때가 있다.

함수의 매개변수도 마찬가지다. 매개변수는 함수가 외부 세계와 어우러지는 방식을 정의한다. 매개변수는 함수를 사용하는 문맥을 설정한다. 예컨대 전화번호 포매팅 함수가 매개변수로 사람을 받는다고 해보자. 그러면 회사 전화번호 포매팅에는 사용할 수 없게 된다. 사람 대신 전화번호 자체를 받도록 정의하면 이 함수의 활용 범위를 넓힐 수 있다.

이렇게 하면 활용 범위가 넓어질 뿐만 아니라, 다른 모듈과의 결합roupling을 제거할 수도 있다. 예컨대 전화번호 포매팅 로직을 사람 관련 정보를 전혀 모르는 모듈에 둘 수 있다. 동작에 필요한 모듈 수가 줄어들수록 무언가를 수정할 때 머리에 담아둬야 하는 내용도 적어진다. 그리고 내 머리도 예전만 못하다(머리 크기는 그대로지만).

매개변수를 올바르게 선택하기란 단순히 규칙 몇 개로 표현할 수 없다. 예컨대 대여한 지 30일이 지났는지를 기준으로 지불 기한이 넘었는지 판단하는 간단한 함수가 있다고 해보자. 이 함수의 매개변수는 지불 객체가 적절할까, 아니면 마감일로 해야 할까? 지불 객체로 정하면 이 함수는 지불 객체의 인터페이스와 결합돼버린다. 대신 지불이 제공하는 여러 속성에 쉽게 접근할 수 있어서 내부 로직이 복잡해지더라도 이 함수를 호출하는 코드를 일일이 찾아서 변경할 필요가 없다. 실질적으로 함수의 캡슐화 수준이 높아지는 것이다.

이 문제의 정답은 바로 정답이 없다는 것이다. 특히 시간이 흐를수록 더욱더 그렇다. 따라서 어떻게 연결하는 것이 더 나은지 더 잘 이해하게 될 때마다 그에 맞게 코드를 개선할 수 있도록 함수 선언 바꾸기 리팩터링과 친숙해져야만 한다.

나는 다른 리팩터링을 지칭할 때 대체로 대표 명칭만 사용한다. 하지만 함수 선언 바꾸기에서 이름 바꾸기'가 차지하는 비중이 상당히 높기 때문에, 단순히 이름만 바꿀 때는 함수 이름 바꾸기'라고 표현해서 확실히 구분할 것이다. 이름을 바꿀 때는 매개변수를 변경할 때는 절차는 똑같다.

절차

이 책에서 다른 리팩터링들은 절차를 한 가지만 소개했다. 방법이 하나뿐이라서가 아니라 대부분 상황에서 대체로 효과적인 방법이라서다. 하지만 함수 선언 바꾸기는 사정이 다르다. 간단

한 절차만으로 충분할 때도 많지만, 더 세분화된 마이그레이션 절차가 훨씬 적합한 경우도 많기 때문이다. 따라서 이 리팩터링을 할 때는 먼저 변경 사항을 살펴보고 함수 선언과 호출문들을 단번에 고칠 수 있을지 가늠해본다. 가능할 것 같다면 간단한 절차를 따른다. 마이그레이션절차를 적용하면 호출문들을 점진적으로 수정할 수 있다. 호출하는 곳이 많거나, 호출 과정이복잡하거나, 호출 대상이 다형 메서드거나, 선언을 복잡하게 변경할 때는 이렇게 해야 한다.

간단한 절차0 매개변수를 제거하려거든 먼저 함수 본문에서 제거 대상 매개변수를 참조하는 곳은 없는지 확인한다.② 메서드 선언을 원하는 형태로 바꾼다.3 기존 메서드 선언을 참조하는 부분을 모두 찾아서 바뀐 형태로 수정한다.Q 테스트한다.


마이그레이션 절차0 이어지는 추출 단계를 수월하게 만들어야 한다면 함수의 본문을 적절히 리팩터링한다.② 함수 본문을 새로운 함수로 추출한다.→ 새로 만들 함수 이름이 기존 함수와 같다면 일단 검색하기 쉬운 이름을 임시로 붙여둔다.3 추출한 함수에 매개변수를 추가해야 한다면 '간단한 절차'를 따라 추가한다.Q 테스트한다.⑤ 기존 함수를 인라인. 2절한다.⑥ 이름을 임시로 붙여뒀다면 함수 선언 바꾸기를 한 번 더 적용해서 원래 이름으로 되돌린다.그 테스트한다.

다형성을 구현한 클래스, 즉 상속 구조 속에 있는 클래스의 메서드를 변경할 때는 다형 관계인다른 클래스들에도 변경이 반영되어야 한다. 이때, 상황이 복잡하기 때문에 간접 호출 방식으로 우회(혹은 중간 단계로 활용)하는 방법도 쓰인다. 먼저 원하는 형태의 메서드를 새로 만들어서 원래 함수를 호출하는 전달(onward 메서드로 활용하는 것이다. 단일 상속 구조라면 전달 메서드를 슈퍼클래스에 정의하면 해결된다. (덕 타이핑outh Nine 처럼) 슈퍼클래스와의 연결을 제

Chapter 06 - 기본적인 리팩터링

Change Function Declaration6.5 함수 선언 바꾸기

181


공하지 않는 언어라면 전달 메서드를 모든 구현 클래스 각각에 추가해야 한다.

공개된 API를 리팩터링할 때는 새 함수를 추가한 다음 리팩터링을 잠시 멈출 수 있다. 이 상태에서 예전 함수를 폐기 대상ierated 으로 지정하고 모든 클라이언트가 새 함수로 이전할 때까지기다린다. 클라이언트들이 모두 이전했다는 확신이 들면 예전 함수를 지운다.

예시: 함수 이름 바꾸기(간단한 절차)함수 이름을 너무 축약한 예를 준비했다.

function circum(radius) { return 2 * Math.PI * radius; }

이 함수의 이름을 이해하기 더 쉽게 바꾸려 한다. ② 먼저 함수 선언부터 수정하자.

function circumference (radius) { return 2 * Math.PI * radius; }

③ 다음으로 circum()을 호출한 곳을 모두 찾아서 circumference()로 바꾼다 (참고로circumference'는 원의 둘레를 뜻한다).

기존 함수를 참조하는 곳을 얼마나 쉽게 찾을 수 있는가는 개발 언어에 영향을 받는다. 정적 타입 언어와 뛰어난 IDE의 조합이라면 함수 이름 바꾸기를 자동으로 처리할 수 있고, 그 과정에서 오류가 날 가능성도 거의 없다. 정적 타입 언어가 아니라면 검색 기능이 뛰어난 도구라도 잘못 찾는 경우가 꽤 있어서 일거리가 늘어난다.

매개변수 추가나 제거도 똑같이 처리한다. 함수를 호출하는 부분을 모두 찾은 뒤, 선언문을 바꾸고, 호출문도 그에 맞게 고친다. 이 각각의 단계를 순서대로 처리하는 편이 대체로 좋다. 함수 이름 바꾸기와 매개변수 추가를 모두 할 때는 이름부터 바꾸고, 테스트하고, 매개변수를 추가하고, 또 테스트하는 식으로 진행한다.

간단한 절차의 단점은 호출문과 선언문을 (다형성을 구현했다면 여러 선언문 모두를) 한 번에수정해야 한다는 것이다. 수정할 부분이 몇 개 없거나 괜찮은 자동 리팩터링 도구를 사용한다면 그리 어렵지 않다. 하지만 수정할 부분이 많다면 일이 힘들어진다. 같은 이름이 여러 개일
때도 문제다. 예컨대 changeAddress()란 메서드가 사람 클래스와 계약 클래스 모두에 정의되어 있을 때, 사람 클래스의 메서드만 이름을 바꾸고 싶은 경우 난감해질 수 있다. 나는 변경 작업이 복잡할수록 한 번에 진행하기를 꺼린다. 그래서 이런 상황에 처하면 마이그레이션 절차를 따른다. 마찬가지로 간단한 절차를 따르다가 문제가 생겨도 코드를 가장 최근의 정상 상태로 돌리고 나서 마이그레이션 절차에 따라 다시 진행한다.

예시: 함수 이름 바꾸기(마이그레이션 절차) 이름을 너무 축약한 앞의 함수를 다시 살펴보자.

function circum(radius) { return 2 * Math.PI * radius; }

이번에는 마이그레이션 절차를 따라 진행하겠다. ② 먼저 함수 본문 전체를 새로운 함수로 추출전한다.

== function circum(radius) return circumference (radius); }

function circumference (radius) { return 2 * Math.PI * radius; }

④ 수정한 코드를 테스트한 뒤 5 예전 함수를 인라인 - 일한다. 그러면 예전 함수를 호출하는 부분이 모두 새 함수를 호출하도록 바뀐다. ① 하나를 변경할 때마다 테스트하면서 한 번에 하나씩 처리하자. 모두 바꿨다면 기존 함수를 삭제한다.

리팩터링 대상은 대부분 직접 수정할 수 있는 코드지만, 함수 선언 바꾸기만큼은 공개된 API, 다시 말해 직접 고칠 수 없는 외부 코드가 사용하는 부분을 리팩터링하기에 좋다. 가령 circum ference() 함수를 만들고 나서 잠시 리팩터링 작업을 멈춘다. 가능하다면 circum()이 폐기 예정epteutro임을 표시한다. 그런 다음 circum()의 클라이언트들 모두가 circumference()를 사용하게 바뀔 때까지 기다린다. 모든 클라이언트가 새 함수로 갈아탔다면 circum()을 삭제한다. circum()을 삭제하는 상쾌한 순간을 결코 맞이하지 못할 수도 있지만, 새로 작성되는 코드

Chapter 06 - 기본적인 리팩터링

Change Function Declaration 6.5 함수 선언 바꾸기

183


들은 더 나은 이름의 새로운 함수를 사용하게 될 것이다.

예시: 매개변수 추가하기

도서 관리 프로그램의 Book 클래스에 예약 기능이 구현되어 있다고 하자.

- Book 클래스... addReservation(customer) { this._reservations.push(customer); }

그런데 예약 시 우선순위 큐를 지원하라는 새로운 요구가 추가되었다. 그래서 addReservation()을 호출할 때 예약 정보를 일반 큐에 넣을지. 우선순위 큐에 넣을지를 지정하는 매개변수를 추가하려 한다. addReservation()을 호출하는 곳을 모두 찾고 고치기가 쉽다면 곧바로 변경하면 된다. 그렇지 않다면 마이그레이션 절차대로 진행해야 한다. 여기서는 후자의 경우라고 가정해보자.

② 먼저 addReservation()의 본문을 새로운 함수로 추출한다. 새로 추출한 함수 이름도addReservation()이어야 하지만, 기존 함수와 이름이 같은 상태로 둘 수는 없으니 우선은 나중에 찾기 쉬운 임시 이름을 붙인다.

- Book 클래스... addReservation(customer) { this.zz_addReservation(customer); } zz_addReservation(customer) { this._reservations.push(customer); }

③ 그런 다음 새 함수의 선언문과 호출문에 원하는 매개변수를 추가한다 (이 작업은 간단한 절차로 진행한다).

184 리팩터링(2판)


Book 클래스.... addReservation(customer) { this.zz_addReservation(customer, false); } zz_addReservation(customer, isPriority) { this._reservations.push(customer); }

나는 자바스크립트로 프로그래밍한다면, 호출문을 변경하기 전에 어서션을 추가하여 호출하는 곳에서 새로 추가한 매개변수를 실제로 사용하는지 확인한다.

Book 클래스.... zz_addReservation(customer, isPriority) { assert(isPriority = true || isPriority === false); this._reservations.push(customer); }

이렇게 해두면 호출문을 수정하는 과정에서 실수로 새 매개변수를 빠뜨린 부분을 찾는 데 도움된다. 오랜 세월 나보다 실수를 많이 하는 프로그래머를 거의 못 봤기 때문이기도 하다.

⑤ 이제 기존 함수를 인라인 · 하여 호출 코드들이 새 함수를 이용하도록 고친다. 호출문은 한번에 하나씩 변경한다.

6 다 고쳤다면 새 함수의 이름을 기존 함수의 이름으로 바꾼다.

이상의 작업은 대부분 간단한 절차만으로도 무리가 없지만, 필요하면 마이그레이션 절차를 따르기도 한다.

예시: 매개변수를 속성으로 바꾸기

지금까지는 이름을 바꾸거나 매개변수 하나만 추가하는 단순한 예만 살펴봤다. 하지만 마이그레이션 절차를 따른다면 훨씬 복잡한 상황도 꽤 깔끔하게 처리할 수 있다. 이번에는 좀 더 복잡한 예를 살펴보자.

고객이 뉴잉글랜드에 살고 있는지 확인하는 함수가 있다고 하자.

옮긴이 미국 북동부 지역으로 메인주 (MA), 코네티컷주(CT), 매사추세츠주(ME), 버몬트주(VT), 뉴햄프셔주(NH), 로드아일랜드주(RI)의 총 6개 주로 이루어져 있다.

Chapter 06 - 기본적인 리팩터링

Change Function Declaration 6.5 함수 선언 바꾸기

185


function in New England (aCustomer) { return ("MA", "CT", "ME", "VI", "NH", "RI").includes (aCustomer address.state); }

다음은 이 함수를 호출하는 코드 중 하나다.

- 호출문... const newEnglanders = someCustomers.filter(c => inNewEngland(c));

inNewEngland() 함수는 고객이 거주하는 주 이름을 보고 뉴잉글랜드에 사는지 판단한다. 나라면 이 함수가 주 식별 코드를 매개변수로 받도록 리팩터링할 것이다. 그러면 고객에 대한 의존성이 제거되어 더 넓은 문맥에 활용할 수 있기 때문이다.

0 나는 함수 선언을 바꿀 때 함수 추출 1절부터 하는 편이다. 하지만 이번 코드는 함수 본문을 살짝 리팩터링해두면 이후 작업이 더 수월해질 터라 우선 매개변수로 사용할 코드를 변수로 추출.3절해둔다.

function inNewEngland(aCustomer) { const stateCode = acustoner.address.state; return ["MA", "CT", "ME", "VI", "NH", "RI").includes(stateCode); }

이제 함수 추출하기 절로 새 함수를 만든다.

function inNewEngland (aCustomer) { const stateCode = aCustomer address.state; return xxNEWinNewEngland(stateCode); } function xxNEWinNewEngland(stateCode) { return ["MA", "CT", "ME", "V", "NH", "RI").includes(stateCode }

);

새 함수의 이름을 나중에 기존 함수 이름으로 바꾸기 쉽도록 검색하기 좋은 이름을 붙여둔다. (예시들을 보면 알겠지만 나는 임시 이름 짓기에 특별히 정해둔 규칙은 없다).

그런 다음 기존 함수 안에 변수로 추출해둔 입력 매개변수를 인라인한다(변수 인라인하기).

function inNewEngland (aCustomer) {

186 리팩터링(2판)


return xxNEWinNewEngland(acustomer.address.state); }

⑤ 함수 인라인하기 - 2로 기존 함수의 본문을 호출문들에 집어넣는다. 실질적으로 기존 함수호출문을 새 함수 호출문으로 교체하는 셈이다. 이 작업은 한 번에 하나씩 처리한다.

- 호출문 ... const newEnglanders = someCustomers.filter(c => XXNEWinNewEngland(c.address.state));

기존 함수를 모든 호출문에 인라인했다면, 함수 선언 바꾸기를 다시 한번 적용하여 새 함수의 이름을 기존 함수의 이름으로 바꾼다.

const newEnglanders = someCustomers.filter(c => inNewEngland(c.address.state));

최상위.... function in NewEngland (stateCode) { return [MA", "CT", "ME", "VT", "NH", "RL"].includes(stateCode); }

자동 리팩터링 도구는 마이그레이션 절차의 활용도를 떨어뜨리기도 하고 효과를 가하기도 한다. 활용도를 떨어뜨리는 이유는 훨씬 복잡한 이름 바꾸기와 매개변수 수정도 자동 리팩터링이 안전하게 수행해줘서 이 절차를 사용할 일이 적어지기 때문이다. 하지만 마지막 예시처럼 모든 작업을 자동 리팩터링만으로 처리할 수 없을 때는 반대로 상당한 도움을 준다. 추출과 인라인 같은 핵심적인 변경을 훨씬 빠르고 안전하게 할 수 있기 때문이다.

Chapter 06 - 기본적인 리팩터링 187

Change Function Declaration6.5 함수 선언 바꾸기


6.6 변수 캡슐화하기

Encapsulate Variable

- 1판에서의 이름:► 필드 자체 캡슐화▶ 필드 캡슐화

let defaultOwner = {firstName: "마틴", lastName: "파울러"};

let defaultOwnerData = {firstName: "마틴", lastName: "파울러"}; export function defaultOwner() {return defaultOwnerData;} export function setDefaultOwner(arg) {defaultOwnerData = arg; }

배경

리팩터링은 결국 프로그램의 요소를 조작하는 일이다. 함수는 데이터보다 다루기가 수월하다.함수를 사용한다는 건 대체로 호출한다는 뜻이고, 함수의 이름을 바꾸거나 다른 모듈로 옮기기는 어렵지 않다. 여차하면 기존 함수를 그대로 둔 채 전달forward 함수로 활용할 수도 있기 때문이다(즉, 예전 코드들은 변함없이 기존 함수를 호출하고, 이 기존 함수가 새로 만든 함수를 호출하는 식이다). 이런 전달 함수를 오래 남겨둘 일은 별로 없지만 리팩터링 작업을 간소화하는데 큰 역할을 한다.

반대로 데이터는 함수보다 다루기가 까다로운데, 그 이유는 이런 식으로 처리할 수 없기 때문이다. 데이터는 참조하는 모든 부분을 한 번에 바꿔야 코드가 제대로 작동한다. 짧은 함수 안의임시 변수처럼 유효범위가 아주 좁은 데이터는 어려울 게 없지만, 유효범위가 넓어질수록 다루기 어려워진다. 전역 데이터가 골칫거리인 이유도 바로 여기에 있다.

그래서 접근할 수 있는 범위가 넓은 데이터를 옮길 때는 먼저 그 데이터로의 접근을 독점하는함수를 만드는 식으로 캡슐화하는 것이 가장 좋은 방법일 때가 많다. 데이터 재구성이라는 어려운 작업을 함수 재구성이라는 더 단순한 작업으로 변환하는 것이다.

데이터 캡슐화는 다른 경우에도 도움을 준다. 데이터를 변경하고 사용하는 코드를 감시할 수 있는 확실한 통로가 되어주기 때문에 데이터 변경 전 검증이나 변경 후 추가 로직을 쉽게 끼워넣을 수 있다. 나는 유효범위가 함수 하나보다 넓은 가변 데이터는 모두 이런 식으로 캡슐화해서 그 함수를 통해서만 접근하게 만드는 습관이 있다. 데이터의 유효범위가 넓을수록 캡슐화해야 한다. 레거시 코드를 다룰 때는 이런 변수를 참조하는 코드를 추가하거나 변경할 때마다 최대한 캡슐화한다. 그래야 자주 사용하는 데이터에 대한 결합도가 높아지는 일을 막을 수 있다.

객체 지향에서 객체의 데이터를 항상 private으로 유지해야 한다고 그토록 강조하는 이유가 바로 여기에 있다. 나는 public 필드를 발견할 때마다 캡슐화해서 (이 경우에는 흔히 '필드 캡슐화하기'로 부른다) 가시 범위를 제한하려 한다. 클래스 안에서 필드를 참조할 때조차 반드시 접근자를 통하게 하는 자가 캡슐화 self-encapsulation 를 주장하는 사람도 있다. 개인적으로는 자가 캡슐화까지는 좀 지나치지 않나 생각한다. 필드를 자가 캡슐화해야 할 정도로 클래스가 크다면 잘게 쪼개야 하기 때문이다. 하지만 클래스를 쪼개기 전 단계로써 필드를 자가 캡슐화하는 것은 도움이 된다.

불변 데이터는 가변 데이터보다 캡슐화할 이유가 적다. 데이터가 변경될 일이 없어서 갱신 전검증 같은 추가 로직이 자리할 공간을 마련할 필요가 없기 때문이다. 게다가 불변 데이터는 옮길 필요 없이 그냥 복제하면 된다. 그래서 원본 데이터를 참조하는 코드를 변경할 필요도 없고, 데이터를 변형시키는 코드를 걱정할 일도 없다. 불변성은 강력한 방부제인 셈이다.

절차

0 변수로의 접근과 갱신을 전담하는 캡슐화 함수들을 만든다. ② 정적 검사를 수행한다. ③ 변수를 직접 참조하던 부분을 모두 적절한 캡슐화 함수 호출로 바꾼다. 하나씩 바꿀 때마다 테스트한다.

변수의 접근 범위를 제한한다. - 변수로의 직접 접근을 막을 수 없을 때도 있다. 그럴 때는 변수 이름을 바꿔서 테스트해보면 해당 변수를 참조하는 곳을 쉽게 찾아낼 수 있다.

⑤ 테스트한다.

변수 값이 레코드라면 레코드 캡슐화하기 1절를 적용할지 고려해본다.

Chapter 06 - 기본적인 리팩터링

Encapsulate Variable 6.6 변수 캡슐화하기

189


예시

전역 변수에 중요한 데이터가 담겨 있는 경우를 생각해보자.

- let defaultowner = {firstName: "마틴", lastName; "파울러"};

데이터라면 당연히 다음과 같이 참조하는 코드가 있을 것이다.

spaceship.owner = defaultOwner;

갱신하는 코드 역시 있을 것이다.

- defaultowner = {firstName: "레베카", lastName: "파슨스");

0 기본적인 캡슐화를 위해 가장 먼저 데이터를 읽고 쓰는 함수부터

function getDefaultOwner() {return defaultOwner;} function setDefaultOwner(arg) {defaultOwner = arg;}

정의한다.

③ 그런 다음 defaultowner를 참조하는 코드를 찾아서 방금 만든 게터 함수를 호출하도록 고친다.

- spaceship.owner = getDefaultowner();대입문은 세터 함수로 바꾼다.

setDefaultowner({firstName: "레베카", lastName: '파슨스"});

하나씩 바꿀 때마다 테스트한다.

Q 모든 참조를 수정했다면 이제 변수의 가시 범위를 제한한다. 그러면 미처 발견하지 못한 참조가 없는지 확인할 수 있고, 나중에 수정하는 코드에서도 이 변수에 직접 접근하지 못하게 만들 수 있다. 자바스크립트로 작성할 때는 변수와 접근자 메서드를 같은 파일로 옮기고 접근자만 노출시키면 된다.

defaultowner.js 파일... let defaultOwner = {firstName: "0", lastName: "21"}; export function getDefaultOwner() {return defaultOwner;} export function setDefaultowner(arg) {defaultowner = arg; }

리팩터링 (2판)

190


변수로의 접근을 제한할 수 없을 때는 변수 이름을 바꿔서 다시 테스트해보면 좋다. 이렇게 한다고 해서 나중에 직접 접근하지 못하게 막을 수 있는 건 아니지만, __privateOnly_defaultOwner처럼 공개용이 아니라는 의미를 담으면서도 눈에 띄는 이름으로 바꾸면 조금이나마 도움이 된다.

마지막으로, 나는 게터 이름 앞에 get을 붙이는 것을 싫어해서 get을 빼도록 하겠다.

i defaultowner.js 파일... let defaultownerData = {firstName: "마틴", lastName: "파울러"); export function getdefaultOwner() {return defaultownerData; } export function setDefaultowner(arg) {defaultownerData = arg; }

자바스크립트에서는 게터와 세터의 이름을 똑같이 짓고 인수가 있냐 없냐에 따라 구분하는 방식을 많이 따른다. 나는 이 방식을 오버로딩된 게터-세터 Durall aag Getter Sa* 라고 부르며, 아주 싫어한다. 그래서 get은 붙이지 않겠지만 set은 계속 붙이겠다.

값 캡슐화하기

방금 본 기본 캡슐화 기법으로 데이터 구조로의 참조를 캡슐화하면, 그 구조로의 접근이나 구조 자체를 다시 대입하는 행위는 제어할 수 있다. 하지만 필드 값을 변경하는 일은 제어할 수없다.

const owner1 = defaultOwner();assert.equal("파울러", Owner1.lastName, "처음 값 확인");const owner2 = defaultOwner();ownera.lastName = "파슨스";assert.equal("파슨스", Owner1. lastName, "owner2를 변경한 후 ");

// 성공할까?

기본 캡슐화 기법은 데이터 항목을 참조하는 부분만 캡슐화한다. 대부분은 이 정도로 충분하지만, 변수뿐 아니라 변수에 담긴 내용을 변경하는 행위까지 제어할 수 있게 캡슐화하고 싶을 때도 많다.

이렇게 하는 방법은 크게 두 가지다. 가장 간단한 방법은 그 값을 바꿀 수 없게 만드는 것이다.

https://martinfowler.com/bliki/OverloadedGetterSetter.html옮긴이 저자가 여기에서는 set 접두어를 유지하겠다고 했지만, 실제 예시 코드들에서는 거의 사용하지 않았다.

Chapter 06 - 기본적인 리팩터링

Encapsulate Vanable6.6 변수 캡슐화하기

191


나는 주로 게터가 데이터의 복제본을 반환하도록 수정하는 식으로 처리한다.

defaultOwner.js... ;}

let defaultownerData = {firstName: "마틴", lastName: "파울러"}; export function defaultOwner() {return Object.assign({), default OwnerData) export function setDefaultowner(arg) {defaultownerData = arg; }

특히 리스트에 이 기법을 많이 적용한다. 데이터의 복제본을 반환하면 클라이언트는 게터로 얻은 데이터를 변경할 수 있지만 원본에는 아무 영향을 주지 못한다. 단, 주의할 점이 있다. 공유데이터(원본)를 변경하기를 원하는 클라이언트가 있을 수 있다. 이럴 때 나는 문제가 될만한부분을 테스트로 찾는다. 아니면 아예 변경할 수 없게 만들 수도 있다. 이를 위한 좋은 방법이레코드 캡슐화하기 1절다.

let defaultownerData = {firstName: "마틴", lastName: "파울러"};export function defaultOwner() {return new Person(defaultOwnerData);}

export function setDefaultOwner(arg) {defaultOwnerData = arg;} class Person { constructor(data) { this.lastName = data. lastName;; this. firstName = data.firstName } get lastName() {return this._lastName; } get firstName() {return this._firstName;} // 다른 속성도 이런 식으로 처리한다.

이렇게 하면 defaultownerData의 속성을 다시 대입하는 연산은 모두 무시된다. 이런 변경을감지하거나 막는 구체적인 방법은 언어마다 다르므로 사용하는 언어에 맞는 방법으로 처리하면 된다.

이처럼 변경을 감지하여 막는 기법을 임시로 활용해보면 도움될 때가 많다. 변경하는 부분을없앨 수도 있고, 적절한 변경 함수를 제공할 수도 있다. 적절히 다 처리하고 난 뒤 게터가 복제본을 반환하도록 수정하면 된다.

지금까지는 게터에서 데이터를 복제하는 방법을 살펴봤는데, 세터에서도 복제본을 만드는 편이 좋을 수도 있다. 정확한 기준은 그 데이터가 어디서 오는지, 원본 데이터의 모든 변경을 그대로 반영할 수 있도록 원본으로의 링크를 유지해야 하는지에 따라 다르다. 링크가 필요 없다.

리팩터링(2판)

192


면 데이터를 복제해 저장하여 나중에 원본이 변경돼서 발생하는 사고를 방지할 수 있다. 복제본 만들기가 번거로울 때가 많지만, 이런 복제가 성능에 주는 영향은 대체로 미미하다. 반면, 원본을 그대로 사용하면 나중에 디버깅하기 어렵고 시간도 오래 걸릴 위험이 있다.

여기서 명심할 점이 있다. 앞에서 설명한 복제본 만들기와 클래스로 감싸는 방식은 레코드 구조에서 깊이가 1인 속성들까지만 효과가 있다. 더 깊이 들어가면 복제본과 객체 래핑 단계가 더 늘어나게 된다.

지금까지 본 것처럼 데이터 캡슐화는 굉장히 유용하지만 그 과정은 간단하지 않을 때가 많다. 캡슐화의 구체적인 대상과 방법은 캡슐화할 데이터를 사용하는 방식과 그 데이터를 어떻게 변경하려는 지에 따라 달라진다. 하지만 분명한 사실은 데이터의 사용 범위가 넓을수록 적절히 캡슐화하는 게 좋다는 것이다.

Chapter 06 - 기본적인 리팩터링 193

Encapsulate Variable 6.6 변수 캡슐화하기


6.7 변수 이름 바꾸기 Rename Variable

let a = height * width;

let area = height * width;

배경

명확한 프로그래밍의 핵심은 이름짓기다. 변수는 프로그래머가 하려는 일에 관해 많은 것을 설명해준다. 단, 이름을 잘 지었을 때만 그렇다. 사실 나는 이름을 잘못 지을 때가 많다. 고민을 충분히 하지 않아서거나, 개발을 더 하다 보니 문제에 대한 이해도가 높아져서거나, 혹은 사용자의 요구가 달라져서 프로그램의 목적이 변해 그럴 때도 있다.

특히 이름의 중요성은 그 사용 범위에 영항을 많이 받는다. 한 줄짜리 람다식 antal expression에서 사용하는 변수는 대체로 쉽게 파악할 수 있다. 맥락으로부터 변수의 목적을 명확히 알 수 있어서 한 글자로 된 이름을 짓기도 한다. 마찬가지로 간단한 함수의 매개변수 이름도 짧게 지어도 될 때가 많다. 물론 자바스크립트와 같은 동적 타입 언어라면 나는 이름 앞에 타입을 드러내는 문자를 붙이는 스타일을 선호한다(가령 매개변수 이름을 acustomer와 같이 짓는다).

함수 호출 한 번으로 끝나지 않고 값이 영속되는 필드라면 이름에 더 신경 써야 한다. 내가 가장 신중하게 이름 짓는 대상이 바로 이런 필드들이다.

194 리팩터링(2판)


절차

0 폭넓게 쓰이는 변수라면 변수 캡슐화하기를 고려한다.

② 이름을 바꿀 변수를 참조하는 곳을 모두 찾아서, 하나씩 변경한다.

· 다른 코드베이스에서 참조하는 변수는 외부에 공개된 변수이므로 이 리팩터링을 적용할 수 없다.변수 값이 변하지 않는다면 다른 이름으로 복제본을 만들어서 하나씩 점진적으로 변경한다. 하나씩 바꿀 때마다 테스트한다.

3 테스트한다.

예시

변수 이름 바꾸기의 가장 간단한 예는 임시 변수나 인수처럼 유효범위가 함수 하나로 국한된변수다. 굳이 예시가 필요 없을 정도로 간단하다. 그저 변수를 참조하는 코드를 찾아서 하나씩바꾸면 되며, 다 바꾼 뒤에는 테스트해서 실수한 부분은 없는지 확인한다.

함수 밖에서도 참조할 수 있는 변수라면 조심해야 한다. 코드베이스 전체에서 두루 참조할 수도 있다. 다음 변수에서 이야기를 시작해보자.

let tphd = "untitled"; 어떤 참조는 다음과 같이 변수를 읽기만 한다. - result += <h1>${tpHd}</h1> ; 값을 수정하는 곳도 있다고 해보자. tpHd = obj['articleTitle']; 0 나는 이럴 때 주로 변수 캡슐화하기로 처리한다. - result += <h1>${title()}</h1> ; setTitle(obj['articleTitle']); function title() {return tpHd;} function setTitle(arg) {tpHd = arg;} 


캡슐화 후에는 변수 이름을 바꿔도 된다.


- let title = "untitled"; function title() {return _title;} function setTitle(arg) {title = arg;}

② 그런 다음 래핑 함수들을 인라인해서 모든 호출자가 변수에 직접 접근하게 하는 방법도 있지만, 나는 별로 내켜하지 않는 방식이다. 이름을 바꾸기 위해 캡슐화부터 해야 할 정도로 널리 사용되는 변수라면 나중을 위해서라도 함수 안에 캡슐화된 채로 두는 편이 좋다고 생각하기 때문이다.

함수를 인라인한다면 값을 얻을 때는 getTitle() 게터를 호출하고 변수 이름에는 밑줄(_)을 붙이지 않았을 것이다.

예시: 상수 이름 바꾸기

② 상수(또는 클라이언트가 볼 때 상수처럼 작용하는 대상)의 이름은 캡슐화하지 않고도 복제방식으로 점진적으로 바꿀 수 있다. 상수가 다음처럼 선언되어 있다고 하자.

- const cpyNm = "애크미 구스베리";

먼저 원본의 이름을 바꾼 후, 원본의 원래 이름(기존 이름)과 같은 복제본을 만든다.

const companyName = "애크미 구스베리"; const cpyNm = companyName;

이제 기존 이름(복제본)을 참조하는 코드들을 새 이름으로 점진적으로 바꿀 수 있다. 다 바꿨다면 복제본을 삭제한다. 나는 기존 이름을 삭제했다가 테스트에 실패하면 되돌리는 방식보다 (앞의 코드처럼) 새 이름으로 선언한 다음 기존 이름에 복사하는 방식이 조금이라도 쉽다면 후자를 선택한다.

이 방식은 상수는 물론, 클라이언트가 볼 때 읽기전용인 변수(가령 자바스크립트의 익스포트한 변수)에도 적용할 수 있다.


6.8 매개변수 객체 만들기Introduce Parameter Object

fil

function amountInvoiced(startDate, endDate) {...} function amountReceived(startDate, endDate) {....} function amountOverdue(startDate, endDate) {...}

function amountInvoiced(aDateRange) {...} function amountReceived (aDateRange) {...} function amountOverdue(aDateRange) {...}

배경

데이터 항목 여러 개가 이 함수에서 저 함수로 함께 몰려다니는 경우를 자주 본다. 나는 이런데이터 무리를 발견하면 데이터 구조 하나로 모아주곤 한다.

데이터 뭉치를 데이터 구조로 묶으면 데이터 사이의 관계가 명확해진다는 이점을 얻는다. 게다.가 함수가 이 데이터 구조를 받게 하면 매개변수 수가 줄어든다. 같은 데이터 구조를 사용하는모든 함수가 원소를 참조할 때 항상 똑같은 이름을 사용하기 때문에 일관성도 높여준다.

하지만 이 리팩터링의 진정한 힘은 코드를 더 근본적으로 바꿔준다는 데 있다. 나는 이런 데이터 구조를 새로 발견하면 이 데이터 구조를 활용하는 형태로 프로그램 동작을 재구성한다. 데이터 구조에 담길 데이터에 공통으로 적용되는 동작을 추출해서 함수로 만드는 것이다(공용함수를 나열하는 식으로 작성할 수도 있고, 이 함수들과 데이터를 합쳐 클래스로 만들 수도 있다). 이 과정에서 새로 만든 데이터 구조가 문제 영역을 훨씬 간결하게 표현하는 새로운 추상개념으로 격상되면서, 코드의 개념적인 그림을 다시 그릴 수도 있다. 그러면 놀라울 정도로 강력한 효과를 낸다. 하지만 이 모든 것의 시작은 매개변수 객체 만들기부터다.

Chapter 06 - 기본적인 리팩터링

IntroduceParameter Object6.8 매개변수 객체 만들기

197


절차

0 적당한 데이터 구조가 아직 마련되어 있지 않다면 새로 만든다., 개인적으로 클래스로 만드는 걸 선호한다. 나중에 동작까지 함께 묶기 좋기 때문이다. 나는 주로 데이터 구조를 값 객체 Vale 만든다.② 테스트한다..Q 테스트한다. ⑤ 함수 호출 시 새로운 데이터 구조 인스턴스를 넘기도록 수정한다. 하나씩 수정할 때마다 테스트한다. 6 기존 매개변수를 사용하던 코드를 새 데이터 구조의 원소를 사용하도록 바꾼다. 7 다 바꿨다면 기존 매개변수를 제거하고 테스트한다.

③ 함수 선언 바꾸기5.5로 새 데이터 구조를 매개변수로 추가한다

예시

온도 측정값eading 배열에서 정상 작동 범위를 벗어난 것이 있는지 검사하는 코드를 살펴보자. 온도 측정값을 표현하는 데이터는 다음과 같다.

const station = { name: "ZB1", readings: [ {temp: 47, time: "2016-11-10 09:10"}, {temp: 53, time: "2016-11-10 09:20"}, {temp: 58, time: "2016-11-10 09:30"}, {temp: 53, time: "2016-11-10 09:40"}, {temp: 51, time: "2016-11-10 09:50"}, ] };

다음은 정상 범위를 벗어난 측정값을 찾는 함수다.

function readingsOutsideRange(station, min, max) { return station.readings .filter(r => r. temp < min il r. temp > max); }

이 함수는 다음과 같이 호출될 수 있다.

https://martinfowler.com/bliki/ValueObject.html

198 리팩터링(2판)


alerts = readingsOutsideRange(station,operatingPlan. temperatureFloor, // 최저 온도operatingPlan. temperatureceiling); // 최고 온도

호출 코드를 보면 operatingPlan의 데이터 항목 두 개를 쌍으로 가져와서 readingsoutsideRange()로 전달한다. 그리고 operatingPlan은 범위의 시작과 끝 이름을 readingsoutsideRange()와 다르게 표현한다. 이와 같은 범위ange 라는 개념은 객체 하나로 묶어 표현하는 게 나은 대표적인 예다. ① 먼저 묶은 데이터를 표현하는 클래스부터 선언하자.

class NumberRange { constructor(min, max) { this. data = {min: min, max: max}; } get min() {return this._data.min; } get max() {return this._data.max;} }

여기서는 기본 자바스크립트 객체가 아닌 클래스로 선언했는데, 이 리팩터링은 새로 생성한 객체로 동작까지 옮기는 더 큰 작업의 첫 단계로 수행될 때가 많기 때문이다. 이 시나리오에는 클래스가 적합하므로 곧바로 클래스를 사용했다. 한편 값 객체로 만들 가능성이 높기 때문에 세터는 만들지 않는다. 내가 이 리팩터링을 할 때는 대부분 값 객체를 만들게 된다.

③ 그런 다음 새로 만든 객체를 readingsoutsideRange()의 매개변수로 추가하도록 함수 선언을 바꾼다..

- function readingsoutsideRange(station, min, max, range) { return station.readings filter(r => r.temp < min || r.temp > max); }

자바스크립트라면 호출문을 예전 상태로 둬도 되지만, 다른 언어를 사용할 때는 다음과 같이새 매개변수 자리에 널을 적어둔다.

- 호출문... alerts = readingsoutsideRange(station,

operatingPlan.temperatureFloor,


operatingPlan. temperatureCeiling, null);

④ 아직까지 동작은 하나도 바꾸지 않았으니 테스트는 문제없이 통과할 것이다. ⑤ 이제 온도범위를 객체 형태로 전달하도록 호출문을 하나씩 바꾼다.

호출문.. const range = new NumberRange(operatingPlan. temperatureFloor,

operatingPlan. temperatureceiling); alerts = readingsOutsideRange(station,

operatingPlan.temperatureFloor, operatingPlan.temperatureceiling, range);

여기서도 동작은 바뀌지 않았다. 새로 건넨 매개변수를 아직 사용하지 않기 때문이다. 따라서이번에도 모든 테스트를 무난히 통과한다.

6 이제 기존 매개변수를 사용하는 부분을 변경한다. 최댓값부터 바꿔보자.

function readingsOutsideRange(station, min, max, -range) { return station.readings .filter(r => r.temp < min || r.temp > range.max); } 호출문.. const range = new Number Range(operatingPlan. temperatureFloor, operatingPlan.temperatureceiling); alerts = readingsOutsideRange(station, operatingPlan. temperatureFloor, operatingPlan. temperatureCeiling, range);

여기서 한 번 테스트한 뒤, 다음 매개변수도 제거한다.

- function readingsoutsideRange(station, min, range) { return station.readings .filter(r => r.temp < range.min || r.temp > range.max); }


- 호출문... const range = new NumberRange(operatingPlan.temperatureFloor, operatingPlan.temperatureceiling); alerts = readingsOutsideRange(station, operatingPlan. temperatureFloor, range);

이상으로 매개변수 객체 만들기가 끝났다.




진정한 값 객체로 거듭나기

앞서 운을 띄웠듯이 매개변수 그룹을 객체로 교체하는 일은 진짜 값진 작업의 준비단계일 뿐이다. 앞에서처럼 클래스로 만들어두면 관련 동작들을 이 클래스로 옮길 수 있다는 이점이 생긴다. 이 예에서는 온도가 허용 범위 안에 있는지 검사하는 메서드를 클래스에 추가할 수 있다.

- function readingsoutsideRange(station, range) {

return station.readings

.filter(r => !range.contains(r.temp)); }

- NumberRange 클래스....

contains(arg) {return (arg >= this.min && arg <= this.max);}

지금까지 한 작업은 여러 가지 유용한 동작을 갖춘 범위(Range) 클래스*를 생성하기 위한 첫 단계다. 코드에 범위 개념이 필요함을 깨달았다면 최댓값과 최솟값 쌍을 사용하는 코드를 발견할 때마다 범위 객체로 바꾸자(당장 operatingPlan의 temperatureFloor와 temperatureceiling을 temperatureRange로 교체할 수 있다), 이러한 값 쌍이 어떻게 사용되는지 살펴보면 다른 유용한 동작도 범위 클래스로 옮겨서 코드베이스 전반에서 값을 활용하는 방식을 간소화할 수 있다. 나라면 진정한 값 객체로 만들기 위해 값에 기반한 동치성 검사 메서드 equality neulhas부터 추가할 것이다.

https://martinfowler.com/eaaDev/Range.html

Chapter 06 - 기본적인 리팩터링

Introduce Parameter 6.8 매개변수 객체 만들기

201


6.9 여러 함수를 클래스로 묶기

Combine Functions into Class

function base (aReading) {...} function taxableChargeaReading) {...} function calculateBaseCharge(aReading) {...}

class Reading { base() {...} taxableCharge() {...} calculateBaseCharge() {...} }

배경

클래스는 대다수의 최신 프로그래밍 언어가 제공하는 기본적인 빌딩 블록이다. 클래스는 데이터와 함수를 하나의 공유 환경으로 묶은 후, 다른 프로그램 요소와 어우러질 수 있도록 그중 일부를 외부에 제공한다. 클래스는 객체 지향 언어의 기본인 동시에 다른 패러다임 언어에도 유용하다.

나는 (흔히 함수 호출 시 인수로 전달되는) 공통 데이터를 중심으로 긴밀하게 엮여 작동하는 함수 무리를 발견하면 클래스 하나로 묶고 싶어진다. 클래스로 묶으면 이 함수들이 공유하는 공통 환경을 더 명확하게 표현할 수 있고, 각 함수에 전달되는 인수를 줄여서 객체 안에서의 함수 호출을 간결하게 만들 수 있다. 또한 이런 객체를 시스템의 다른 부분에 전달하기 위한 참조를 제공할 수 있다.

이 리팩터링은 이미 만들어진 함수들을 재구성할 때는 물론, 새로 만든 클래스와 관련하여 놓친 연산을 찾아서 새 클래스의 메서드로 뽑아내는 데도 좋다.

리팩터링(2판)

202


함수를 한데 묶는 또 다른 방법으로 여러 함수를 변환 함수로 묶기 10도 있다. 어느 방식으로 진행할지는 프로그램 문맥을 넓게 살펴보고 정해야 한다. 클래스로 묶을 때의 두드러진 장점은 클라이언트가 객체의 핵심 데이터를 변경할 수 있고, 파생 객체들을 일관되게 관리할 수 있다.는 것이다.

이런 함수들을 중첩 함수 형태로 묶어도 된다. 나는 중첩 함수보다 클래스를 선호하는 편인데, 중첩 함수는 테스트하기가 까다로울 수 있기 때문이다. 또한 한 울타리로 묶을 함수들 중 외부에 공개할 함수가 여러 개일 때는 클래스를 사용할 수밖에 없다.

클래스를 지원하지 않는 언어를 사용할 때는 같은 기능을 함수를 객체처럼 Functional As Ohiee" 패턴을 이용해 구현하기도 한다.

절차

0 함수들이 공유하는 공통 데이터 레코드를 캡슐화한다. • 공통 데이터가 레코드 구조로 묶여 있지 않다면 먼저 매개변수 객체 만들기 절로 데이터를 하나로 묶는 레코드를 만든다. ② 공통 레코드를 사용하는 함수 각각을 새 클래스로 옮긴다(함수 옮기기9.13), - 공통 레코드의 멤버는 함수 호출문의 인수 목록에서 제거한다. ③ 데이터를 조작하는 로직들은 함수로 추출해서 새 클래스로 옮긴다.

예시

나는 차를 사랑하기로 소문난 영국에서 자랐다 (개인적으로 영국에서 파는 차는 대부분 좋아하지 않지만 중국이나 일본 차는 좋아한다). 그래서 작가다운 상상력을 발휘하여 정부에서 차를 수돗물처럼 제공하는 예를 떠올려봤다. 사람들은 매달 차 계량기를 읽어서 측정값uding을 다음과 같이 기록한다고 하자.

- reading = {customer: "ivan", quantity: 10, month: 5, year: 2017};

이런 레코드를 처리하는 코드를 훑어보니 이 데이터로 비슷한 연산을 수행하는 부분이 상당히 많았다. 그래서 기본요금을 계산하는 코드를 찾아봤다.

https://martinfowler.com/bliki/FunctionAsObject.html

Chapter 06 - 기본적인 리팩터링

Combine Functions into Class 6.9 여러 함수를 클래스로 묶기

203


클라이언트 1... const aReading = acquireReading(); const baseCharge = baseRate(aReading.month, aReading.year) * aReading.quantity;

필수품이라면 죄다 세금을 매기는 영국을 배경으로 하는 만큼 차에도 세금을 부과한다. 하지만기본적인 차 소비량만큼은 면세가 되도록 했다.

클라이언트 2... const aReading = acquireReading(); const base = (baseRate(aReading.month, aReading.year) * aReading.quantity); const taxableCharge = Math.max(0, base - taxThreshold(aReading.year));

여기서도 기본요금 계산 공식이 똑같이 등장하는 것을 발견했다. 나와 성향이 같다면 곧바로함수로 추출하려 시도할 것이다. 그런데 마침 이미 이렇게 처리해둔 코드를 발견했다.

- 클라이언트 3... const aReading = acquireReading(); const basicCharge Amount = calculateBaseCharge (aReading); function calculateBaseCharge(aReading) { - 기본 요금 계산 함수 return baseRate(aReading.month, aReading.year) * aReading.quantity; }

이런 코드를 보면 나는 본능적으로 앞의 두 클라이언트 (클라이언트 1, 2)도 이 함수를 사용하도록 고치려고 한다. 하지만 이렇게 최상위 함수로 두면 못 보고 지나치기 쉽다는 문제가 있다.나라면 이런 함수를 데이터 처리 코드 가까이에 둔다. 그러기 위한 좋은 방법으로, 데이터를 클래스로 만들 수 있다.

0 먼저 레코드를 클래스로 변환하기 위해 레코드를 캡슐화 1절한다.

- class Reading { constructor(data) { this._customer = data.customer; this._quantity = data.quantity; this._month = data.month; this. year = data.year; } get customer() {return this._customer;}

리팩터링(2판)

204


get quantity() {return this._quantity;} get month() {return this._month;} get year() {return this._year;} }

② 이미 만들어져 있는 calculateBaseCharge()부터 옮기자. 새 클래스를 사용하려면 데이터를 얻자마자 객체로 만들어야 한다.

클라이언트 3... const rawReading = acquireReading(); const aReading = new Reading(rawReading); const basicChargeAmount = calculateBaseCharge(aReading); 그런 다음 calculateBaseCharge()를 새로 만든 클래스로 옮긴다(함수 옮기기 1). Reading 클래스... get calculateBaseCharge() { return baseRate(this.month, this.year) * this.quantity; } 클라이언트 3.... const rawReading = acquireReading(); const aReading = new Reading(rawReading); const basicChargeAmount = aReading.calculateBaseCharge; 이 과정에서 메서드 이름을 원하는대로 바꾼다(함수 이름 바꾸기 1-5절). - get baseCharge() { return baseRate(this.month, this.year) * this.quantity; } 클라이언트 3... const rawReading = acquire ing(); const aReading = new Reading(rawReading); const basicCharge Amount = aReading.baseCharge;

이렇게 이름을 바꾸고 나면 Reading 클래스의 클라이언트는 baseCharge가 필드인지, 계산된

Chapter 06 - 기본적인 리팩터링

CombineFunctions into Class6.9 여러 함수를 클래스로 묶기

205


값(함수 호출)인지 구분할 수 없다. 이는 단일 접근 원칙' inform Access Principle* 을 따르므로 권장하는 방식이다.

이제 첫 번째 클라이언트에서 중복된 계산 코드를 고쳐 앞의 메서드를 호출하게 한다.

클라이언트 1... const rawReading = acquireReading(); const aReading = new Reading(rawReading); const baseCharge = aReading.baseCharge;

나는 이런 코드를 보면 baseCharge 변수를 인라인 4절하고 싶어진다. 하지만 이보다는 세금을 계산하는 클라이언트부터 인라인하는 일이 절실하다. 그래서 우선 새로 만든 기본요금 메서드를 사용하도록 수정한다.

클라이언트 2... const rawReading = acquireReading(); const aReading = new Reading(rawReading); const taxableCharge = Math.max(0, aReading. baseCharge - taxThreshold(aReading.year));

이어서 세금을 부과할 소비량을 계산하는 코드를 함수로 추출이 전한다.

function taxableChargeFn(aReading) { return Math.max(0, aReading.baseCharge - taxThreshold(aReading.year)); } - 클라이언트 3... const rawReading = acquireReading(); const aReading = new Reading(rawReading); const taxableCharge = taxableChargeFn(aReading);

그런 다음 방금 추출한 함수를 Reading 클래스로 옮긴다(함수 옮기기8.1절).

- Readi 클래스... get taxableCharge() {

return Math.max(0, this.baseCharge - taxThreshold(this.year)); }

https://martinfowler.com/bliki/UniformAccessPrinciple.html

206 리팩터링(2판)


클라이언트 3... const rawReading = acquireReading(); const aReading = new Reading(rawReading); const taxableCharge = aReading, taxableCharge;

파생 데이터 모두를 필요한 시점에 계산되게 만들었으니 저장된 데이터를 갱신하더라도 문제제가 생길 일이 없다. 나는 대체로 불변 데이터를 선호하지만 어쩔 수 없이 가변 데이터를 사용해야 할 때가 많다(가령 자바스크립트처럼 불변성을 염두에 두지 않고 설계된 언어라면 더욱 그렇다). 프로그램의 다른 부분에서 데이터를 갱신할 가능성이 꽤 있을 때는 클래스로 묶어두면큰 도움이 된다.

Chapter 06 - 기본적인 리팩터링

Combine Functions into Class6.9 여러 함수를 클래스로 묶기

-

207


6.10 여러 함수를 변환 함수로 묶기 Combine Functions into Transform

e() {

go

function base(aReading) {...} function taxableCharge (aReading) {...}

function enrichReading(argReading) { const aReading = _.cloneDeep(argReading); aReading.baseCharge = base(aReading); aReading, taxableCharge = taxableCharge(aReading); return aReading; }

배경

소프트웨어는 데이터를 입력받아서 여러 가지 정보를 도출하곤 한다. 이렇게 도출된 정보는 여러 곳에서 사용될 수 있는데, 그러다 보면 이 정보가 사용되는 곳마다 같은 도출 로직이 반복되기도 한다. 나는 이런 도출 작업들을 한데로 모아두길 좋아한다. 모아두면 검색과 갱신을 일관된 장소에서 처리할 수 있고 로직 중복도 막을 수 있다.

이렇게 하기 위한 방법으로 변환 함수riuson)를 사용할 수 있다. 변환 함수는 원본 데이터를 입력받아서 필요한 정보를 모두 도출한 뒤, 각각을 출력 데이터의 필드에 넣어 반환한다. 이렇게 해두면 도출 과정을 검토할 일이 생겼을 때 변환 함수만 살펴보면 된다.

이 리팩터링 대신 여러 함수를 클래스로 묶기정로 처리해도 된다. 둘 중 어느 것을 적용해도 좋으며, 나는 대체로 소프트웨어에 이미 반영된 프로그래밍 스타일을 따르는 편이다. 그런데

둘 사이에는 중요한 차이가 하나 있다. 원본 데이터가 코드 안에서 갱신될 때는 클래스로 묶는 편이 훨씬 낫다. 변환 함수로 묶으면 가공한 데이터를 새로운 레코드에 저장하므로, 원본 데이터가 수정되면 일관성이 깨질 수 있기 때문이다.

여러 함수를 한데 묶는 이유 하나는 도출 로직이 중복되는 것을 피하기 위해서다. 이 로직을 함수로 추출하는 것만으로도 같은 효과를 볼 수 있지만, 데이터 구조와 이를 사용하는 함수가 근처에 있지 않으면 함수를 발견하기 어려울 때가 많다. 변환 함수(또는 클래스)로 묶으면 이런 함수들을 쉽게 찾아 쓸 수 있다.

절차

변환할 레코드를 입력받아서 값을 그대로 반환하는 변환 함수를 만든다.

이 작업은 대체로 깊은 복사로 처리해야 한다. 변환 함수가 원본 레코드를 바꾸지 않는지 검사하는 테스트를 마련해두면 도움될 때가 많다. ② 묶을 함수 중 함수 하나를 골라서 본문 코드를 변환 함수로 옮기고, 처리 결과를 레코드에 새 필드로 기록한다. 그런 다음 클라이언트 코드가 이 필드를 사용하도록 수정한다. → 로직이 복잡하면 함수 추출하기 1절부터 한다.③ 테스트한다.

④ 나머지 관련 함수도 위 과정에 따라 처리한다.





예시

내가 자란 영국에서는 일상에서 차가 차지하는 비중이 상당히 큰 나머지, 나는 서민에게 차를 수돗물처럼 제공하는 서비스를 상상하게 됐다. 이런 서비스가 있다면 매달 사용자가 마신차의 양을 측정'eding해야 한다.

reading = {customer: "ivan", quantity: 10, month: 5, year: 2017};

코드 곳곳에서 다양한 방식으로 차 소비량을 계산한다고 해보자. 그중 사용자에게 요금을 부과하기 위해 기본요금을 계산하는 코드도 있다.

클라이언트 1... const aReading = acquireReading(); const baseCharge = baseRate(aReading.month, aReading.year) * aReading.quantity;

세금을 부과할 소비량을 계산하는 코드도 필요하다. 모든 시민이 차 세금을 일부 면제받을 수

Chapter 06 - 기본적인 리팩터링

Combine Functions into Transform 6.10 여러 함수를 변환 함수로 묶기

1

209


있도록 정부가 사려깊게 설계하여 이 값은 기본 소비량보다 적다.

클라이언트 2... const aReading = acquireReading(); const base = (baseRate(aReading.month, aReading.year) * aReading.quantity); const taxableCharge = Math.max(0, base - taxThreshold(aReading.year));

이 코드에는 이와 같은 계산 코드가 여러 곳에 반복된다고 해보자. 중복 코드는 나중에 로직을수정할 때 골치를 썩인다 (장담하건대 반드시 수정할 일이 생긴다). 중복 코드라면 함수 추출하기 1걸로 처리할 수도 있지만, 추출한 함수들이 프로그램 곳곳에 흩어져서 나중에 프로그래머가 그런 함수가 있는지조차 모르게 될 가능성이 있다. 실제로도 다른 곳에서 함수로 만들어둔 것을 발견했다.

클라이언트 3... const aReading = acquireReading(); const basicChargeAmount = calculateBaseCharge(aReading);

function calculateBaseCharge(aReading) { - 다른 곳에서 이미 함수로 만들어둠

returm. baseRate(aReading.month, aReading.year) * aReading.quantity; }

이를 해결하는 방법으로, 다양한 파생 정보 계산 로직을 모두 하나의 변환 단계로 모을 수 있다. 변환 단계에서 미가공 측정값을 입력받아서 다양한 가공 정보를 덧붙여 반환하는 것이다.

0 우선 입력 객체를 그대로 복사해 반환하는 변환 함수를 만든다.

--- function enrichReading(original) {

const result = .cloneDeep(original);

return result; }

깊은 복사는 lodash 라이브러리가 제공하는 cloneDeep()로 처리했다.

참고로 나는 본질은 같고 부가 정보만 덧붙이는 변환 함수의 이름을 "enrich" 라 하고, 형태가 변할 때만 "transform"이라는 이름을 쓴다.

리팩터링(2판)

210


② 이제 변경하려는 계산 로직 중 하나를 고른다. 먼저 이 계산 로직에 측정값을 전달하기 전에 부가 정보를 덧붙이도록 수정한다.

클라이언트 3... const rawReading = acquireReading(); - 미가공 측정값 const aReading = enrichReading(rawReading); const basicCharge Amount = calculateBaseCharge (aReading);

calculateBaseCharge()를 부가 정보를 덧붙이는 코드 근처로 옮긴다 (함수 옮기기3.1).

- function enrichReading(original) { const result = _.cloneDeep (original); result.baseCharge = calculateBaseCharge(result); return result; } 미가공 측정값에 기본 소비량을 부가 정보로 덧붙임

변환 함수 안에서는 결과 객체를 매번 복제할 필요 없이 마음껏 변경해도 된다. 나는 불변 데이터를 선호하지만 널리 사용되는 언어는 대부분 불변 데이터를 다루기 어렵게 돼 있다. 데이터가 모듈 경계를 넘나든다면 어려움을 기꺼이 감내하며 불변으로 만들어 사용하겠지만, 데이터의 유효범위가 좁을 때는 마음껏 변경한다. 또한 나는 변환 함수로 옮기기 쉬운 이름을 붙인다(여기서는 보강된 값을 담는 변수의 이름을 aReading이라고 지었다).

이어서 이 함수를 사용하던 클라이언트가 부가 정보를 담은 필드를 사용하도록 수정한다.

클라이언트 3.. const rawReading - acquireReading(); const aReading = enrichReading(rawReading); const basicChargeAmount = aReading.baseCharge;

calculateBaseCharge()를 호출하는 코드를 모두 수정했다면, 이 함수를 enrichReading()안에 중첩시킬 수 있다. 그러면 기본요금을 이용하는 클라이언트는 변환된 레코드를 사용해야 한다'는 의도를 명확히 표현할 수 있다.

여기서 주의할 점이 있다. enrichReading() 처럼 정보를 추가해 반환할 때 원본 측정값 레코드는 변경하지 않아야 한다는 것이다. 따라서 이를 확인하는 테스트를 작성해두는 것이 좋다.

Chapter 06 - 기본적인 리팩터링

Combine Functions into Transform 16.10 여러 함수를 변환 함수로 묶기

211


- it('check reading unchanged', function() { const baseReading = {customer: "ivan", quantity: 15, month: 5, year: 2017}; const oracle = .cloneDeep(baseReading); enrichReading(baseReading); assert.deepEqual(baseReading, oracle); });

그런 다음 클라이언트 1도 이 필드를 사용하도록 수정한다.

클라이언트 1... const rawReading = acquireReading(); const aReading = enrichReading(rawReading); const baseCharge = aReading. baseCharge;

이때 baseCharge 변수도 인라인4하면 좋다.

④ 이제 세금을 부과할 소비량 계산으로 넘어가자. 가장 먼저 변환 함수부터 끼워 넣는다.

const rawReading = acquireReading(); const aReading = enrichReading(rawReading); const base = (baseRate(aReading.month; aReading.year) * Reading.quantity); const taxableCharge = Math.max(0, base - taxThreshold (aReading.year));

여기서 기본요금을 계산하는 부분을 앞에서 새로 만든 필드로 교체할 수 있다. 계산이 복잡하다면 함수 추출하기 1절부터 하겠으나, 여기서는 복잡하지 않으니 한 번에 처리하겠다.

- const rawReading = acquireReading(); const aReading = enrichReading(rawReading); const base = aReading.baseCharge; const taxableCharge = Math.max(0, base - taxThreshold (aReading.year));

테스트해서 문제가 없다면 base 변수를 인라인 4정한다.

const rawReading = acquireReading(); const aReading = enrichReading(rawReading); const taxableCharge = Math.max(0, aReading.baseCharge - taxThreshold(aReading.year));

그런 다음 계산 코드를 변환 함수로 옮긴다.

212 리팩터링(2판)


-- function enrichReading(original) { const result = _.cloneDeep (original); result.baseCharge = calculateBaseCharge(result); result.taxableCharge = Math.max(0, result.baseCharge - taxThreshold(result.year)); return result;

이제 새로 만든 필드를 사용하도록 원본 코드를 수정한다.

- const rawReading = acquireReading(); const aReading = enrichReading(rawReading); const taxableCharge = aReading.taxableCharge; 테스트에 성공하면 taxableCharge 변수를 인라인 · 전한다.

측정값에 부가 정보를 추가하는 지금 방식에서 클라이언트가 데이터를 변경하면 심각한 문제가 생길수 있다. 예컨대 사용량 필드를 변경하면 데이터의 일관성이 깨진다. 내 생각에 자바스크립트에서 이문제를 방지하기 가장 좋은 방법은 여러 함수를 클래스로 묶기다. 불변 데이터 구조를 지원하는 언어라면 이런 문제가 생길 일이 없다. 따라서 이런 언어로 프로그래밍할 때는 (그렇지 않은 언어를 쓸때보다) 여러 함수를 변환 함수로 묶기를 사용하는 비중이 높아진다. 하지만 불변성을 제공하지않는 언어라도, 웹 페이지에 출력할 부가 데이터를 도출할 때처럼 데이터가 읽기전용 문맥에서 사용될 때는 변환 방식을 활용할 수 있다.

Chapter 06 - 기본적인 리팩터링 213

Combine Functionsinto Transform|6.10 여러 함수를 변환 함수로 묶기

}


6.11 단계 쪼개기Split Phase

를 -1-0

const orderData = orderString.split(/\s+/); const productPrice = priceList[orderData[0].split("-") [1]]; const orderPrice = parseInt(orderData[1]) * productPrice;

const orderRecord = parseOrder (order); const orderPrice = price(orderRecord, priceList);

function parseOrder (aString) { const values = astring.split(/\S+/); retum ({

productID: values[0].split("-")[1],

quantity; parseInt(values[1]), }); }

function price(order, pricelist) { return order.quantity * priceList[order.productID];

배경

나는 서로 다른 두 대상을 한꺼번에 다루는 코드를 발견하면 각각을 별개 모듈로 나누는 방법을 모색한다. 코드를 수정해야 할 때 두 대상을 동시에 생각할 필요 없이 하나에만 집중하기 위해서다. 모듈이 잘 분리되어 있다면 다른 모듈의 상세 내용은 전혀 기억하지 못해도 원하는 대

214 리팩터링(2판)

}


로 수정을 끝마칠 수도 있다.

이렇게 분리하는 가장 간편한 방법 하나는 동작을 연이은 두 단계로 쪼개는 것이다. 입력이 체리 로직에 적합하지 않은 형태로 들어오는 경우를 예로 생각해보자. 이럴 때는 본 작업에 들어가기 전에 입력값을 다루기 편한 형태로 가공한다. 아니면 로직을 순차적인 단계들로 분리해도 된다. 이때 각 단계는 서로 확연히 다른 일을 수행해야 한다.

가장 대표적인 예는 컴파일러다. 컴파일러는 기본적으로 어떤 텍스트(프로그래밍 언어로 작성된 코드)를 입력받아서 실행 가능한 형태(예컨대 특정 하드웨어에 맞는 목적 코드 yeet title)로 변환한다. 컴파일러의 역사가 오래되다 보니 사람들은 컴파일 작업을 여러 단계가 순차적으로 연결된 형태로 분리하면 좋다는 사실을 깨달았다. 즉, 텍스트를 토큰화하고, 토큰을 파싱해서 구문 트리를 만들고, (최적화 등) 구문 트리를 변환하는 다양한 단계를 거친 다음, 마지막으로 목적 코드를 생성하는 식이다. 각 단계는 자신만의 문제에 집중하기 때문에 나머지 단계에 관해서는 자세히 몰라도 이해할 수 있다.

이렇게 단계를 쪼개는 기법은 주로 덩치 큰 소프트웨어에 적용된다. 가령 컴파일러의 매 단계는 다수의 함수와 클래스로 구성된다. 하지만 나는 규모에 관계없이 여러 단계로 분리하면 좋을만한 코드를 발견할 때마다 기본적인 단계 쪼개기 리팩터링을 한다. 다른 단계로 볼 수 있는 코드 영역들이 마침 서로 다른 데이터와 함수를 사용한다면 단계 쪼개기에 적합하다는 뜻이다. 이 코드 영역들을 별도 모듈로 분리하면 그 차이를 코드에서 훨씬 분명하게 드러낼 수 있다.

절차 

0 두 번째 단계에 해당하는 코드를 독립 함수로 추출한다. ② 테스트한다.③ 중간 데이터 구조를 만들어서 앞에서 추출한 함수의 인수로 추가한다. ④ 테스트한다. ⑤ 추출한 두 번째 단계 함수의 매개변수를 하나씩 검토한다. 그중 첫 번째 단계에서 사용되는 것은 중간 데이터 구조로 옮긴다. 하나씩 옮길 때마다 테스트한다. → 간혹 두 번째 단계에서 사용하면 안 되는 매개변수가 있다. 이럴 때는 각 매개변수를 사용한 결과를 중간 데이터 구조의 필드로 추출하고, 이 필드의 값을 설정하는 문장을 호출한 곳으로 옮긴 ⑥ 첫 번째 단계 코드를 함수로 추출하면서 중간 데이터 구조를 반환하도록 만든다. → 이때 첫 번째 단계를 변환기 객체로 추출해도 좋다.

Chapter 06 - 기본적인 리팩터링

Split Phase| 6.11 단계 쪼개기

215


예시

상품의 결제 금액을 계산하는 코드로 시작해보자.

function priceOrder (product, quantity, shippingMethod) { const basePrice = product.basePrice * quantity; const discount = Math.max(quantity - product.discountThreshold, 0) * product.basePrice * product.discountRate; const shippingPerCase = (basePrice > shippingMethod.discountThreshold) ? shippingMethod.discountedFee : shippingMethod. feePerCase; const shippingCost = quantity * shippingPerCase; const price = basePrice - discount + shippingCost; return price; }

간단한 예지만, 가만 보면 계산이 두 단계로 이뤄짐을 알 수 있다. 앞의 몇 줄은 상품 정보를 이용해서 결제 금액 중 상품 가격을 계산한다. 반면 뒤의 코드는 배송 정보를 이용하여 결제 금액중 배송비를 계산한다. 나중에 상품 가격과 배송비 계산을 더 복잡하게 만드는 변경이 생긴다.면 (비교적 서로 독립적으로 처리할 수 있으므로) 이 코드는 두 단계로 나누는 것이 좋다.

① 먼저 배송비 계산 부분을 함수로 추출전한다.

= function priceOrder(product, quantity, shippingMethod) { const basePrice = product.basePrice * quantity; const discount = Math.max(quantity - product.discountThreshold, 0) * product.basePrice * product.discountRate; const price = applyShipping(basePrice, shippingMethod, quantity, discount); return price; }

두 번째 단계를 처리하는 함수 function applyShipping(basePrice, shippingMethod, quantity, discount) { const shippingPerCase = (basePrice > shippingMethod.discountThreshold) ? shippingMethod.discountedFee : shippingMethod.feePerCase; const shippingCost = quantity * shippingPerCase; const price = basePrice - discount + shippingCost; return price; }

두 번째 단계에 필요한 데이터를 모두 개별 매개변수로 전달했다. 실전에서는 이런 데이터가상당히 많을 수 있는데, 어차피 나중에 걸러내기 때문에 걱정할 필요 없다.

리팩터링(2판)

216


③ 다음으로 첫 번째 단계와 두 번째 단계가 주고받을 중간 데이터 구조를 만든다.

function priceOrder (product, quantity, shipping Method) {

const basePrice = product.basePrice * quantity; const discount = Math.max(quantity - product.discountThreshold, 6)

* product.basePrice * product.discountRate; const priceData = {}; - 중간 데이터 구조 const price = applyShipping(priceData, basePrice, shippingMethod, quantity, discount);

return price; }

function applyShipping(priceData, basePrice, shippingMethod, quantity, discount) { const shippingPerCase = (basePrice > shippingMethod.discountThreshold)

? shippingMethod.discountedFee : shippingMethod.feePerCase; const shippingCost = quantity shippingPerCase; const price = basePrice - discount + shippingCost;

return price; }

⑤ 이제 applyShipping()에 전달되는 다양한 매개변수를 살펴보자. 이중 basePrice는 첫 번째 단계를 수행하는 코드에서 생성된다. 따라서 중간 데이터 구조로 옮기고 매개변수 목록에서 제거한다.

function priceOrder (product, quantity, shippingMethod) { const basePrice = product.basePrice * quantity; const discount = Math.max (quantity - product.discountThreshold, 6)

* product.basePrice * product.discountRate; const priceData = {basePrice: basePrice); const price = applyShipping(priceData, basePrice, shippingMethod, quantity, discount);

return price; }

function applyShipping (priceData, basePrice, shippingMethod, quantity, discount) { const shippingPerCase = (priceData basePrice > shippingMethod. discountThreshold)

? shippingMethod.discountedFee : shippingMethod feePerCase; const shipping Cost = quantity * shippingPerCase; const price = priceData.basePrice - discount + shippingCost;

return price; }

Chapter 06 - 기본적인 리팩터링

Split Phase| 6.11 단계 포개기

217


다음으로 shippingMethod를 보자. 이 매개변수는 첫 번째 단계에서는 사용하지 않으니 그대로 둔다.

그다음 나오는 quantity는 첫 번째 단계에서 사용하지만 거기서 생성된 것은 아니다. 그래서 그냥 매개변수로 놔둬도 된다. 하지만 나는 최대한 중간 데이터 구조에 담는 걸 선호하기 때문에 이 매개변수도 옮긴다.

function priceOrder (product, quantity, shippingMethod) { const basePrice = product.basePrice + quantity; const discount = Math.max (quantity - product.discountThreshold, 0) * product.basePrice * product.discountRate; const priceData = {basePrice: basePrice, quantity: quantity}; const price = applyShipping (priceData, shippingMethod, quantity, discount); return price; }

function applyShipping (priceData, shippingMethod, quantity, discount) { const shippingPerCase = (priceData.basePrice > shippingMethod.discountThreshold)

? shippingMethod.discountedFee : shippingMethod.feePerCase; const shipping Cost = priceData.quantity * shippingPerCase; const price = priceData.basePrice discount + shipping Cost; return price; }

discount도 같은 방법으로 처리한다.

function priceOrder (product, quantity, shippingMethod) {

const basePrice = product.basePrice * quantity; const discount = Math.max (quantity - product.discountThreshold, 6)

* product.basePrice * product.discountRate; const priceData = {basePrice: basePrice, quantity: quantity, discount:discount); const price = applyShipping(priceData, shippingMethod, discount);

return price; }

function applyShipping(priceData, shippingMethod, discount) { const shippingPer Case = (priceData.basePrice > shippingMethod.discountThreshold) ? shippingMethod.discountedFee : shippingMethod. feePerCase; const shippingCost = priceData.quantity shippingPerCase;

218 리팩터링(2판)


const price = priceDatabasePrice - priceData.discount + shipping Cost; return price; }

매개변수들을 모두 처리하면 중간 데이터 구조가 완성된다. ⑥ 이제 첫 번째 단계 코드를 함수로 추출하고 이 데이터 구조를 반환하게 한다.

-function priceOrder (product, quantity, shippingMethod) {

const priceData = calculatePricingData(product, quantity); const price = applyShipping(priceData, shippingMethod); return price; } function calculatePricingData(product, quantity) { 첫 번째 단계를 처리하는 함수 const basePrice = product.basePrice * quantity; const discount = Math.max (quantity - product.discountThreshold, 0) * product.basePrice * product.discountRate; return {basePrice: basePrice, quantity: quantity, discount:discount}; } function applyShipping(priceData, shippingMethod) { - 두 번째 단계를 처리하는 함수 const shippingPerCase = (priceData.basePrice > shippingMethod.discountThreshold) ? shippingMethod. discountedfee shippingMethod feePerCase; const shipping Cost = priceData.quantity * shippingPer Case; const price = priceData.basePrice - priceData.discount + shippingCost; return price; } 나는 최종 결과를 담은 상수들(price)도 깔끔하게 정리해야 속이 시원하다.

function priceOrder (product, quantity, shippingMethod) {

const priceData = calculatePricingData(product, quantity);

return applyShipping(priceData, shippingMethod); }

function calculatePricingData(product, quantity) {

const basePrice = product.basePrice * quantity; const discount = Math.max (quantity - product.discountThreshold, 0)

* product.basePrice * product.discountRate; return {basePrice: basePrice, quantity: quantity, discount:discount);

Chapter 06 - 기본적인 리팩터링 219

Split Phase| 6.11 단계 쪼개기


function applyShipping (priceData, shippingMethod) { const shippingPerCase = (priceData.basePrice > shippingMethod.discountThreshold) ? shippingMethod.discountedFee : shippingMethod feePerCase; const shipping Cost = priceData.quantity + shippingPerCase; return priceData.basePrice - priceData.discount + shippingCost; }

}

예시: 명령줄 프로그램 쪼개기(자바)

JSON 파일에 담긴 주문의 개수를 세는 자바 프로그램을 살펴보자.

{ try { if (args. length = 0) throw new RuntimeException("a20 91274|| 9."); String filename = args[args. Length - 1]; File input = Paths.get(filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order [] orders = mapper.readValue(input, Order[].class); if (Stream of (args). anyMatch(arg -> "-1".equals(arg))) System.out.println(Stream.of orders) .filter(o -> "ready".equals(o.status)) .count(); else System.out.println(orders.length); } catch (Exception e) { System.err.println(e); System.exit(1); } }

이 프로그램은 명령줄에서 실행할 때 주문이 담긴 파일 이름을 인수로 받는다. 이때 옵션인 -r플래그를 지정하면 "ready" 상태인 주문 센다.

public static void main(String[] args)

220 리팩터링(2판)


주문을 읽는 부분은 잭슨 라이브러리를 이용했다. ObjectMapper는 각 JSON 레코드를 간단히 public 데이터 필드로 구성된 자바 객체로 매핑한다. JSON 레코드의 status 필드는 Order 클래스의 public 필드인 status에 매핑되는 식이다. 잭슨 라이브러리는 이보다 정교한 JSON 매핑도 제공하지만, 이 예시와 관련이 없으므로 따로 설명하지 않겠다.

이 코드는 두 가지 일을 한다. 하나는 주문 목록을 읽어서 개수를 세고, 다른 하나는 명령줄 인수를 담은 배열을 읽어서 프로그램의 동작을 결정한다. 따라서 단계 쪼개기 리팩터링의 대상으로 적합하다. 첫 번째 단계는 명령줄 인수의 구문을 분석해서 의미를 추출한다. 두 번째 단계는 이렇게 추출된 정보를 이용하여 데이터를 적절히 가공한다. 이렇게 분리해두면, 프로그램에서 지정할 수 있는 옵션이나 스위치가 늘어나더라도 코드를 수정하기 쉽다.

그런데 단계 쪼개기와 상관없는 작업부터 할 것이다. 리팩터링할 때는 테스트를 작성하고 자주 수행해야 하지만, 자바로 작성된 명령줄 프로그램은 테스트하기가 고통스럽다. 매번 JVM을 구동해야 하는데 그 과정이 느리고 복잡하기 때문이다. 특히 메이븐 Matem의 단점을 싫어한다면 고통이 배가된다. 이 문제를 개선하려면 일반적인 JUnit 호출로 자바 프로세스 하나에서 테스트할 수 있는 상태로 만들면 된다. 이를 위해 먼저 핵심 작업을 수행하는 코드 전부를 함수로 추출 11절한다.

- public static void main(String[] args) { try { run(args); } catch (Exception e) { System.err.println(e); System.exit(1); } }

static void run(String[] args) throws IOException { if (args. length == 0) throw new RuntimeException("파일명을 입력하세요."); String filename = args[args. length - 1]; File input = Paths.get(filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order[] orders = mapper.readValue(input, Order[].class);

https://github.com/Faster XML/jackson

Chapter 06 - 기본적인 리팩터링

Split Phase 6.11 단계 쪼개기

221


if (Stream.of(args).anyMatch(arg -> "-r".equals(arg))) System.out.println(Stream. of (orders) .filter(o -> "ready".equals(o.status)) .count()); else System.out.println(orders.length); }

run() 메서드를 테스트 코드에서 쉽게 호출할 수 있도록 접근 범위를 패키지로 설정했다. 이로써 이 메서드를 자바 프로세스 안에서 호출할 수 있지만, 결과를 받아보려면 표준 출력으로 보내는 방식을 수정해야 한다. 이 문제는 System.out을 호출하는 문장을 호출한 곳으로 옮겨 4해결한다.

public static void main(String[] args) { try {

System.out.println(run(args)); } catch (Exception e) {

System.err.println(e);

System.exit(1); } }

static long run(String[] args) throws IOException { if (args.length = 0) throw new RuntimeException("파일명을 입력하세요."); String filename = args[args. Length - 1]; File input = Paths.get(filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order[] orders = mapper. readValue(input, Order().class); if (Stream.of(args).anyMatch(arg -> "r".equals(arg)))) return Stream of (orders).filter(o -> "ready".equals(o.status)).count(); else return orders.length; }

이렇게 하면 기존 동작을 망치지 않으면서 run() 메서드를 검사하는 JUnit 테스트를 작성할 수 있다. 이로써 명령줄에서 매번 자바 프로세스를 새로 띄울 때보다 훨씬 빨라졌다. 지금까지의 단계는 리팩터링 시 중요하다. 테스트가 느리거나 불편하면 리팩터링 속도가 느려지고 오류가 생길 가능성도 커진다. 따라서 먼저 테스트를 쉽게 수행할 수 있도록 수정한 다음에 리팩터

222 리팩터링(2판)


링하는 게 좋다.

이번 예에서는 명령줄 호출과 표준 출력에 쓰는 느리고 불편한 작업과 자주 테스트해야 할 복잡한 동작을 분리함으로써 테스트를 더 쉽게 수행하게 만들었다. 이 원칙을 흔히 험블 객체 패턴't mile hited Patent 이라 한다. 단, 여기서는 객체가 아니라 main() 메서드에 적용했다. main()에 담긴 로직을 최대한 간소하게 만들어서 문제가 생길 여지가 줄인 것이다.

이제 단계를 쪼갤 준비가 끝났다. ① 가장 먼저 할 일은 두 번째 단계에 해당하는 코드를 독립된 메서드로 추출하는 것이다. 그래서 다음과 같이 수정한다.

static long run(String[] args) throws IOException { if (args.length == 0) throw new RuntimeException("파일명을 입력하세요."); String filename = args[args.length - 1]; return countOrders(args, filename); }

private static long countOrders(String[] args, String filename) throws IOException { File input = Paths.get(filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order[] orders = mapper.readValue(input, Order[].class); if (Stream.of(args).anyMatch(arg -> "".equals(arg))) return Stream.of(örders).filter(o -> "ready".equals(o.status)).count(); else. return orders. Length; }

③ 다음으로 중간 데이터 구조를 추가한다. 레코드는 단순한 게 좋은데, 자바이므로 클래스로 구현한다.

static long run(String[] args) throws IOException { if (args. length == 0) throw new RuntimeException("파일명을 입력하세요."); CommandLine commandLine = new CommandLine(); String filename = args[args. length - 1); return countOrders (commandLine, args, filename); private static long countOrders(CommandLine commandLine, String[] args, String filename)

https://martinfowler.com/books/meszaros.html

Chapter 06 - 기본적인 리팩터링

Split Phase| 6.11 단계 쪼개기

223


throws IOException { File input = Paths.get(filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order[] orders = mapper.readValue(input, Order[].class); if (Stream.of (args). anyMatch(arg -> "-".equals(arg))) return Stream.of (orders).filter(o -> "ready".equals(o.status)).count(); else return orders.length; }

private static class Command Line {}

⑤ 이제 두 번째 단계 메서드인 countOrders()로 전달되는 다른 인수들을 살펴본다. args부터 보자. args는 첫 번째 단계에서 사용하는데, 이를 두 번째 단계에까지 노출하는 건 적절치 않다. 지금 단계를 쪼개는 목적이 args를 사용하는 부분을 모두 첫 번째 단계로 분리하는 것이기 때문이다.

args를 처리하기 위해 가장 먼저 할 일은 이 값을 사용하는 부분을 찾아서 그 결과를 추출하는이다. 여기서는 단 한 번, 개수를 세는 코드가 "ready" 상태인 주문만 세는지 확 데..용하므로 이 조건식을 변수로 추출 3 질한다.

static long run(String[] args) throws IOException { if (args. length = 0) throw new RuntimeException("파일명을 입력하세요."); CommandLine command Line = new CommandLine(); String. filename = args[args.length - 1]; return countOrders (command Line, args, filename); }

private static long countOrders(CommandLine commandLine, String[] args, String filename) throws IOException { File input = Paths.get(filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order[] orders = mapper.readValue(input, Order[].class); boolean onlyCountReady = Stream.of(args). anyMatch(arg -> "-r".equals(arg)); if (onlyCountReady) return Stream.of(orders).filter(o -> "ready".equals(o.status)).count(); else return orders. length; }

224 리팩터링(2판)


private static class CommandLine()

그런 다음 이 값을 중간 데이터 구조로 옮긴다.

static long run(String[] args) throws IOException { if (args. length == 0) throw new RuntimeException(" 0921419."); CommandLine commandLine = new CommandLine(); String filename = args[args. length - 1]; return countOrders(commandLine, args, filename); }

private static long countOrders(CommandLine commandLine, String[] args, String filename)

throws IOException { File input = Paths.get(filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order[] orders = mapper.readValue(input, Order[].class); commandLine.onlyCountReady = Stream of (args). anyMatch(arg -> "--".equals(arg)); if (commandLine.onlyCountReady)

return Stream.of(orders).filter(o -> "ready".equals(o.status)).count(); else

return orders. Length; }

private static class CommandLine {

boolean onlyCountReady; }

여기서는 CommandLine에 public 필드로 두는 방식을 택했다. 평소에는 꺼리는 방식이지만 이 예에서는 사용되는 범위가 좁기 때문에 문제가 없다.

다음으로 onlyCountReady에 값을 설정하는 문장을 호출한 곳으로 옮긴다. 4 질

static long run(String[] args) throws IOException { if (args.length == 0) throw new RuntimeException("T1991|19."); CommandLine commandLine = new ConmandLine(); String filename = args[args.length - 1]; commandLine.onlyCountReady = Stream.of(args). anyMatch(arg -> "-1".equals(arg)); return countOrders (commandLine, args, filename);

Chapter 06 - 기본적인 리팩터링

Split Phase 6.11 단계 쪼개기

225


private static long countOrders(CommandLine command Line, String[] args, String filename) throws IOException { File input = Paths.get(filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order[] orders = mapper. readValue(input, Order().class); if (commandLine.onlyCountReady) return Stream.of(orders).filter(o -> "ready".equals(o.status)).count(); else return orders. Length; } private static class Command Line { boolean onlyCountReady; }

이어서 filename 매개변수를 중간 데이터 구조인 CommandLine 객체로 옮긴다.

String[] args) throws IOException { if (args.length = 0) throw new RuntimeException("ono 9195|19."); CommandLine commandLine = new CommandLine(); commandLine.filename = args[args. Length - 1]; commandline.onlyCountReady = Stream.of (args) anyMatch(arg -> "-r".equals(arg)); return countOrders(commandLine, filename); } private static long countOrders(CommandLine commandLine, String filename) throws IOException { File input = Paths.get(commandLine.filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order[] orders = mapper.readValue(input, Order[].class); if (commandLine.onlyCountReady) return Stream.of(orders).filter(o -> "ready".equals(o.status)).count(); else return orders.length; }

static long run(

private static class CommandLine

boolean onlyCountReady,

String filename; }

226 리팩터링(2판)


매개변수 처리가 다 끝났다. ⑥ 이제 첫 번째 단계의 코드를 메서드로 추출한다.

static long run(String[] args) throws IOException { CommandLine commandLine = parseCommandLine(args); return countOrders (commandLine);

private static CommandLine parseCommandLine(String[] args) { if (args.length == %) throw new RuntimeException(" TO2||2."); CommandLine commandLine = new CommandLine(); commandLine.filename = args[args. Length - 1]; commandLine.onlyCountReady = Stream of (args). anyMatch(arg -> "-r".equals(arg)); return commandLine; }

private static long countOrders(CommandLine commandLine) throws IOException {

File input = Paths.get(commandLine.filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order[] orders = mapper.readValue(input, Order().class); if (commandLine.onlyCountReady)

return Stream.of (orders).filter(o -> "ready".equals(o.status)).count(); else

return orders. Length; }

private static class Command Line {

boolean onlyCountReady;

String filename; }

단계 쪼개기 리팩터링의 핵심은 이 정도로 끝났다. 그런데 나라면 이름 바꾸기와 인라인하기로 조금 더 정리해야 직성이 풀린다.

static long run(String[] args) throws IOException {

return countOrders(parseCommandLine(args)); }

private static CommandLine parseCommandLine(String[] args) { if (args. Length = 0) throw new RuntimeException("120 121 || ..."); Command Line result = new CommandLine();

Chapter 06 - 기본적인 리팩터링

!

Split Phase| 6.11 단계 쪼개기

227


매개변수 처리가 다 끝났다. ⑥ 이제 첫 번째 단계의 코드를 메서드로 추출한다.

static long run(String[] args) throws IOException { CommandLine commandLine = parseCommandLine(args); return countOrders(commandLine); }

private static CommandLine parseCommandLine(String[] args) { if (args. Length == 0) throw new RuntimeException("092174|| 2.."); CommandLine commandLine = new CommandLine(); commandLine.filename = args[args. Length - 1]; commandLine.onlyCountReady = Stream of (args). anyMatch(arg -> "-r".equals(arg)); return command Line; }

private static long countOrders(CommandLine commandLine) throws IOException { File input = Paths.get(commandLine.filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order[] orders = mapper.readValue(input, Order().class); if (comandLine.onlyCountReady) return Stream.of(orders).filter(o -> "ready".equals(o.status)).count(); else return orders. Length;

private static class Command Line {

boolean onlyCountReady;

String filename; }

단계 쪼개기 리팩터링의 핵심은 이 정도로 끝났다. 그런데 나라면 이름 바꾸기와 인라인하기로 조금 더 정리해야 직성이 풀린다.

static long run(String[] args) throws IOException {

return countOrders(parseCommandLine(args)); }

private static CommandLine parseCommandLine(String[] args) { if (args.length == 0) throw new RuntimeException(" TO

9246 || 8."); CommandLine result = new CommandLine();

Chapter 06 - 기본적인 리팩터링

Split Phase 6.11 단계포개기

227


result.filename = args[args. length - 1]; result.onlyCountReady = Stream.of(args). anyMatch(arg -> "-1".equals(arg)); return result; }

private static long countOrders(CommandLine commandLine) throws IOException { File input = Paths.get(commandLine.filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order[] orders = mapper.readValue(input, Order[].class); if (commandLine.onlyCountReady) return Stream.of(orders).filter(o -> "ready".equals(o.status)).count(); else return orders.length; } private static class CommandLine { boolean onlyCountReady: String filename; }

이제 두 단계가 명확하게 분리됐다. parseCommandLine()은 오로지 명령줄 관련 작업만 처리하고, countOrders()는 실제로 처리할 작업만 수행한다. 이제 두 메서드를 독립적으로 테스트하기 쉬워졌다. 여기서 로직이 더 복잡해진다면 아마도 parseCommandLine()을 더 전문화된 라이브러리로 대체할 것이다.

예시: 첫 번째 단계에 변환기 사용하기(자바)

앞의 명령줄 예시에서는 첫 번째 단계에서 간단한 데이터 구조를 만들어서 두 번째 단계로 전달했다. 이렇게 하지 않고 명령줄 인수를 담은 문자열 배열을 두 번째 단계에 적합한 인터페이스로 바꿔주는 변환기 filisfornner 객체를 만들어도 된다.

이 방식을 설명하기 위해 앞 예시에서 두 번째 단계에 데이터를 전달할 CommandLine 객체를 생성하는 부분으로 돌아가보자.

-static long run(String[] args) throws IOException { if (args. length = 0) throw new RuntimeException("파일명을 입력하세요."); CommandLine command Line = new CommandLine(); String filename = args[args. length - 1];

228 리팩터링(2판)


return countOrders (commandLine, args, filename); }

private static long countOrders(CommandLine throws IOException { File input = Paths.get(filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order[] orders = mapper.readValue(input, Order[].class); if (Stream of (args). anyMatch(arg -> "--".equals(arg))) return Stream.of(orders).filter(o -> "ready".equals(o.status)).count(); else return orders.length; }

commandLine, String[] args, String filename)

private static class CommandLine {}

앞 예시에서는 동작을 포함할 수 있는 객체 대신 레코드 구조를 만들었기 때문에, 내부 클래스를 만들고 나중에 public 데이터 멤버로 채웠다. 하지만 다음과 같이 동작까지 포함하는 최상위 클래스로 빼내는 방법도 있다.

App 클래스.. static long run(String[] args) throws IOException { if (args. Length = 0) throw new RuntimeException("20 121 || 9."); CommandLine commandLine = new ConmandLine(); String filename = args[args. Length - 1]; return countOrders(commandline, args, filename); }

private static long countOrders(CommandLine commandLine, String[] args, String filename) throws IOException { File input = Paths.get(filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order[] orders = mapper .readValue(input, Order[].class); if (Stream of (args). anyMatch(arg -> "--".equals(arg))) return Stream.of (orders).filter(o -> "ready".equals(o.status)).count(); else return orders.length; }

Chapter 06 - 기본적인 리팩터링 229

Split Phase6.11 단계 쪼개기


- CommandLine 클래스.... public class Command Line { String[] args; public CommandLine(String[] args) { this.args = args; } }

이 클래스는 생성자에서 인수 배열을 받아서 첫 단계 로직이 할 일을 수행한다. 즉, 입력받은 데이터를 두 번째 단계에 맞게 변환하는 메서드들을 제공할 것이다.

처리 과정을 확실히 이해하기 위해 countOrders()의 인수를 뒤에서부터 살펴보자. 먼저 filename이다. 이 인수에는 임시 변수를 질의 함수로 바꾸기 사지를 적용한다.

- App 클래스... static long run(String[] args) throws IOException { if (args. length = 0) throw new RuntimeException("파일명을 입력하세요."); CommandLine commiandLine = new CommandLine(args); return countOrders(commandLine, args, filename (args)); }

private static String filename(String[] args) {

return args[args. Length - 1]; }

private static long countOrders(CommandLine commandLine, String[] args, String filename) throws IOException { File input = Paths.get(filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order[] orders = mapper.readValue(input, Order[].class); if (Stream.of(args).anyMatch(arg -> "-".equals(arg))) return Stream.of(orders).filter(o -> "ready".equals(o.status)).count(); else return orders.length; }

바로 이어서 이 질의 메서드를 CommandLine 클래스로 옮긴다(함수 옮기기 전).

리팩터링(2판)

230


App 3214... static long run(String[] args) throws IOException { if (args. length = 0) throw new RuntimeException("20180126||.."); CommandLine command Line = new CommandLine(args); return countOrders(commandLine, args, commandLine.filename()); }

private static long countOrders(CommandLine commandLine, String[] args, String filename)

throws IOException { File input = Paths.get(filename).toFile(); ObjectMapper mapper = new ObjectMapper(); Order[] orders = mapper.readValue(input, Order[].class); if (Stream.of(args). anyMatch(arg -> "--".equals(arg)))

return Stream of (orders).filter(o -> "ready".equals(o.status)).count(); else

return orders. Length; }

- CommandLine A...

String[] args;

public CommandLine(String[] args) {

this.args = args; } String filename() {

return args[args. length - 1]; }

이제 함수 선언 바꾸기 : 5일로 countOrders()가 새로 만든 메서드를 사용하도록 고친다. App ... static long run(String[] args) throws IOException { if (args.length == ) throw new RuntimeException("DOS 91417|.."); ConmandLine commandLine = new CommandLine(args); return countOrders(commandLine, args, commandline.filename. -); } private static long countOrders(CommandLine commandLine, String[] args; String filename) throws IOException { File input = Paths.get(commandline.filename()).toFile();

Chapter 06 - 기본적인 리팩터링 231

Split Phase| 6.11 단계 쪼개기


ObjectMapper mapper = new ObjectMapper();
Order[] orders = mapper.readValue(input, Order[]/class);
if (Stram.of(args).anyMatch(arg->"-r".equals(arg)))
return Stram.of(orders).filter(o->"ready.equals(o.status)).count();
elsereturn orders.length
}

static long run(String[] args) throw IOException {
  if (args.length == 0) throw new RuntimeException("파일명을 입력하세요.");
  CommandLine commandLine = new CommandLine(args);
  return countOrders(commandLine, args);
}

private static long coutOrders(CommandLine commandLine, String[] args) throws IOException {
  File input = Path.get(commandLine.filename()).tiFile();
  ObjectMapper mapper = new CommandLine(args);
  return countOrders(commandLine, args);
}

private static long countOrders(CommandLine commandLine, String[] args) throw IOException {
  File input = Path.get(commandLine.filename()).toFile();
  ObjectMapper mapper = new ObjectMapper();
  Order[] orders = mapper.readValue(input, Order[].class);
  if (onluCountReady(args))
    return Stream.of(orders).filter(o->"ready".equals(o.status)).count();
  else
    return orders.length;
}

private static boolean onlyCountReady(String[] args) {
  return Stream.of(args).anyMatch(arg-> "-r".equals(arg));
}

그런 다음 이 메서드를 CommandLine 클래스로 옮기고 args 매개변수를 삭제한다.

--app 클래스
static long run(String[] args) throws IOException {
  if (args.length==0) throw new RuntimeException("파일명을 입력하세요.");
  CommandLine commandLine = new CommandLine(args);
  return countOrders(commandLine, args);
}

private static long countOrders(CommandLine commandLine, String[] args) throws IOException {
  File input = Path.get(commandLine.filename()).toFile();
  ObjectMapper mapper = new ObjectMapper();
  Order[] orders = mapper.readValue(input, Order[].class);
  if (commandLine.onlyCountReady())
    return Stream.of(orders).filter(o->"ready".equals(o.status)).count();
  else
    return orders.length;
}

--CommandLine 클래스

String[] args;

public CommandLine(String[] args){
  this.args = args;
}
String filename() {
  return args[args.length - 1];
}
boolean onlyCountReady() {
  return Stream.of(args).anyMatch(arg => "-r".equals(arg));
}

지금까지는 변환 로직을 새 클래스로 옮기는 방식으로 리팩터링했다. 추가로, 명령줄 인수가 존재하는지 검사하는 부분도 옮겨준다.(문장을 함수로 옮기기8.3절)

--app 클래스
static long run(String[] args) throws IOException {
  if (args.length == 0) throw new RuntimeException("파일명을 입력하세요.");
  CommandLine commandLine = enw CommandLine(args);
  return countOrders(commandLine);
}

private static long countOrders(CommandLine commandLine) throws IOException {
  File input = Paths.get(commandLine.filename()).toFile();
  ObjectMapper mapper = new ObjectMapper();
  Order[] orders = mapper.readValue(input, Order[].class);
  if (commandLine.onlyCountReady())
    return Stream.of(orders).filter(o->"ready".equals(o.status)).count();
  else
    return orders.length;
}


--CommandLine 클래스
String[] args;

public CommandLine(Sting[] args) {
  this.args = args;
  if (args.length == 0) throw new RuntimeException("파일명을 입력하세요.");
}
String filename() {
  return args[args.length - 1];
}
boolean onlyCountReady() {
  return Stream.of(args).anyMatch(arg->"-r".equals(arg));
}

나는 이렇게 단순한 데이터 구조는 사용하기 꺼리는 편이다. 하지만 이 예시처럼 순차적으로 실행되는 두 함수 사이에서 단순 통신용으로 사용하는 것처럼 제한된 문맥에서만 사용할 때는 개의치 않는다. 이렇게 객체를 변환기로 바꾸는 방식도 나름 장점이 있다. 나는 두 방식 중 어느 하나를 특별히 선호하지는 않는다. 핵심은 어디까지나 단계를 명확히 분리하는 데 있기 때문이다.
