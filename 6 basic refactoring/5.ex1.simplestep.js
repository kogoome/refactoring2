// * 함수 이름 바꾸기 -간단한 절차의 경우

function circum(radius) {
	return 2 * Math.PI * radius
}

// 이 함수의 이름을 이해하기 더 쉽게 바꾸려 한다. 절차(2) 먼저 함수 선언부터 수정하자.

function circumference(radius) {
	return 2 * Math.PI * radius
}

// 절차(3) 다음으로 circum()을 호출한 곳을 모두 찾아서 circumference()로 바꾼다 (참고로'circumference'는 원의 둘레를 뜻한다).

//기존 함수를 참조하는 곳을 얼마나 쉽게 찾을 수 있는가는 개발 언어에 영향을 받는다. 정적 타입 언어와 뛰어난 IDE의 조합이라면 함수 이름 바꾸기를 자동으로 처리할 수 있고, 그 과정에서 오류가 날 가능성도 거의 없다. 정적 타입 언어가 아니라면 검색 기능이 뛰어난 도구라도 잘못 찾는 경우가 꽤 있어서 일거리가 늘어난다.

// 매개변수 추가나 제거도 똑같이 처리한다. 함수를 호출하는 부분을 모두 찾은 뒤, 선언문을 바꾸고, 호출문도 그에 맞게 고친다. 이 각각의 단계를 순서대로 처리하는 편이 대체로 좋다. 함수 이름 바꾸기와 매개변수 추가를 모두 할 때는 이름부터 바꾸고, 테스트하고, 매개변수를 추가하고, 또 테스트하는 식으로 진행한다.

// 간단한 절차의 단점은 호출문과 선언문을 (다형성을 구현했다면 여러 선언문 모두를) 한 번에수정해야 한다는 것이다. 수정할 부분이 몇 개 없거나 괜찮은 자동 리팩터링 도구를 사용한다면 그리 어렵지 않다. 하지만 수정할 부분이 많다면 일이 힘들어진다. 같은 이름이 여러 개일때도 문제다. 예컨대 changeAddress()란 메서드가 사람 클래스와 계약 클래스 모두에 정의되어 있을 때, 사람 클래스의 메서드만 이름을 바꾸고 싶은 경우 난감해질 수 있다. 나는 변경 작업이 복잡할수록 한 번에 진행하기를 꺼린다. 그래서 이런 상황에 처하면 마이그레이션 절차를 따른다. 마찬가지로 간단한 절차를 따르다가 문제가 생겨도 코드를 가장 최근의 정상 상태로 돌리고 나서 마이그레이션 절차에 따라 다시 진행한다.