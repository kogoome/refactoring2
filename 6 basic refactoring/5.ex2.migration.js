// * 함수 이름 바꾸기 -마이그레이션

function circum(radius) { return 2 * Math.PI * radius; }

// 이번에는 마이그레이션 절차를 따라 진행하겠다. 
// 절차(2) 먼저 함수 본문 전체를 새로운 함수로 추출(6.1)한다.

function circum(radius) { return circumference (radius) }

function circumference (radius) { return 2 * Math.PI * radius; }

// 절차(4) 수정한 코드를 테스트한 뒤 절차(5) 예전 함수를 인라인(6.2)한다. 그러면 예전 함수를 호출하는 부분이 모두 새 함수를 호출하도록 바뀐다. 
// 절차(7) 하나를 변경할 때마다 테스트하면서 한 번에 하나씩 처리하자. 모두 바꿨다면 기존 함수를 삭제한다.

// 리팩터링 대상은 대부분 직접 수정할 수 있는 코드지만, 함수 선언 바꾸기만큼은 공개된 API, 다시 말해 직접 고칠 수 없는 외부 코드가 사용하는 부분을 리팩터링하기에 좋다. 가령 circumference() 함수를 만들고 나서 잠시 리팩터링 작업을 멈춘다. 가능하다면 circum()이 폐기 예정deprecate임을 표시한다. 그런 다음 circum()의 클라이언트들 모두가 circumference()를 사용하게 바뀔 때까지 기다린다. 모든 클라이언트가 새 함수로 갈아탔다면 circum()을 삭제한다. circum()을 삭제하는 상쾌한 순간을 결코 맞이하지 못할 수도 있지만, 새로 작성되는 코드들은 더 나은 이름의 새로운 함수를 사용하게 될 것이다.

