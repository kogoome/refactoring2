class 오리 {
	get 소리() {
		return '꽦꽥'
	}
}
class 오리같은사람 {
	get 소리() {
		return '꽦꽥'
	}
}

class 좀도둑 {
  get 소리(){
    return '슉슈슈슉'
  }
  get 서리() {
    return '수박'
  }
}

function 오리소리(오리:오리) {
  // 타입스크립트는 매개변수의 타입을 오리로 받았고
  // 오리와 같은 구조를 가진 타입에 대해서는 인수를 허용
	return 오리.소리
}

// ! 구조적 타이핑은 정적타이핑을 체크하는 과정에서 쓰여짐
const a:좀도둑 = new 오리() // 같은 구조를 가지고있지 않으므로 오류
const b = new 오리같은사람()
const c:오리 = new 좀도둑() // 오리와 같은 구조를 갖고있기 때문에 허용, 마치 자바의 슈퍼클래스와 서브클래스의 관계와 같음.

console.log(오리소리(a)) // 꽦꽥
console.log(오리소리(b)) // 꽦꽥
console.log(오리소리(c)) // 슉슈슈슉

// 자바스크립트의 클래스는 상속을 이용하지 않아도 같은 매서드만 있다면
// 상속과 다름없는 상태가 된다.
